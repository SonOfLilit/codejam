<!DOCTYPE HTML PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html><head>


<meta http-equiv="refresh" content="172795">
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
  <title>GCJ 2009 World Final: Dashboard</title>
  <link rel="stylesheet" type="text/css" 
href="year%20of%20more%20code%20jam_files/base.css">
  <link rel="stylesheet" type="text/css" 
href="year%20of%20more%20code%20jam_files/dashboard.css">
  
  <script type="text/javascript" src="year%20of%20more%20code%20jam_files/Dashboard.js"></script>
  
  <script type="text/javascript"><!--
    /**
     * Initializes GCJ.problems and GCJ.io from Django parameters.
     * Also initializes the two user specific variables GCJ.isQualified and
     * GCJ.lastClarSeenTime.
     * This is the first function called once from GCJ.main().
     */
    GCJ.initContestVariables = function () {
      // Convert Django's 'contest' to 'GCJ.contest'.
      GCJ.contest.id = "311101";
      GCJ.contest.name = "GCJ 2009 World Final";
      GCJ.contest.version = 0;
      
        GCJ.contest.version = 4;
      
      GCJ.contest.start_int = 1258131600;
      GCJ.base_url = '/codejam/contest';

      GCJ.isQualified = 0;
      GCJ.isLoggedIn = 0;
      GCJ.hasAnalysis = 1;
      // Convert Django's 'problems' to JS 'GCJ.problems'.
      
        GCJ.problems.push({
            "id": "322102",
            "key": "agxjb2RlamFtLXByb2RyEAsSCHByb2JsZW1zGLbUEww",
            "name": "Year of More Code Jam",
            "type": "default"
        });
      
        GCJ.problems.push({
            "id": "317103",
            "key": "agxjb2RlamFtLXByb2RyEAsSCHByb2JsZW1zGK-tEww",
            "name": "Min Perimeter",
            "type": "eps=1e-9"
        });
      
        GCJ.problems.push({
            "id": "319101",
            "key": "agxjb2RlamFtLXByb2RyEAsSCHByb2JsZW1zGP28Eww",
            "name": "Doubly-sorted Grid",
            "type": "default"
        });
      
        GCJ.problems.push({
            "id": "322101",
            "key": "agxjb2RlamFtLXByb2RyEAsSCHByb2JsZW1zGLXUEww",
            "name": "Wi-fi Towers",
            "type": "default"
        });
      
        GCJ.problems.push({
            "id": "339102",
            "key": "agxjb2RlamFtLXByb2RyEAsSCHByb2JsZW1zGJ7ZFAw",
            "name": "Marbles",
            "type": "default"
        });
      
        GCJ.problems.push({
            "id": "341101",
            "key": "agxjb2RlamFtLXByb2RyEAsSCHByb2JsZW1zGO3oFAw",
            "name": "Lights",
            "type": "eps=1e-5"
        });
      

  
      // Convert Django's 'all_io' to JS 'GCJ.io'.
      var io;
      
        io = new Array();
        stat = new Array();
        
          io.push({
              "difficulty": 0,
              "points": 5,
              "attempts": 0,
              "secsSolved": -1,
              "secsPassed": -1
          });
        
          io.push({
              "difficulty": 1,
              "points": 12,
              "attempts": 0,
              "secsSolved": -1,
              "secsPassed": -1
          });
        
        GCJ.io.push(io);
      
        io = new Array();
        stat = new Array();
        
          io.push({
              "difficulty": 0,
              "points": 5,
              "attempts": 0,
              "secsSolved": -1,
              "secsPassed": -1
          });
        
          io.push({
              "difficulty": 1,
              "points": 15,
              "attempts": 0,
              "secsSolved": -1,
              "secsPassed": -1
          });
        
        GCJ.io.push(io);
      
        io = new Array();
        stat = new Array();
        
          io.push({
              "difficulty": 0,
              "points": 10,
              "attempts": 0,
              "secsSolved": -1,
              "secsPassed": -1
          });
        
          io.push({
              "difficulty": 1,
              "points": 20,
              "attempts": 0,
              "secsSolved": -1,
              "secsPassed": -1
          });
        
        GCJ.io.push(io);
      
        io = new Array();
        stat = new Array();
        
          io.push({
              "difficulty": 0,
              "points": 3,
              "attempts": 0,
              "secsSolved": -1,
              "secsPassed": -1
          });
        
          io.push({
              "difficulty": 1,
              "points": 25,
              "attempts": 0,
              "secsSolved": -1,
              "secsPassed": -1
          });
        
        GCJ.io.push(io);
      
        io = new Array();
        stat = new Array();
        
          io.push({
              "difficulty": 0,
              "points": 7,
              "attempts": 0,
              "secsSolved": -1,
              "secsPassed": -1
          });
        
          io.push({
              "difficulty": 1,
              "points": 32,
              "attempts": 0,
              "secsSolved": -1,
              "secsPassed": -1
          });
        
        GCJ.io.push(io);
      
        io = new Array();
        stat = new Array();
        
          io.push({
              "difficulty": 0,
              "points": 21,
              "attempts": 0,
              "secsSolved": -1,
              "secsPassed": -1
          });
        
          io.push({
              "difficulty": 1,
              "points": 45,
              "attempts": 0,
              "secsSolved": -1,
              "secsPassed": -1
          });
        
        GCJ.io.push(io);
      
    };
  //--></script>
</head><body onload="GCJ.main()">
<div id="logo-div">
  <a href="http://code.google.com/codejam/">
    <img src="year%20of%20more%20code%20jam_files/logo_image2.gif" 
id="logo" alt="Google Code Jam">
  </a>
</div>

<div>


<div style="display: none;">
  <form id="csrf-form-GetInputFile"><div style="display: none;"><input 
name="csrfmiddlewaretoken" 
value="MGE1OGFlYmI3YjBlYzFhMjNkZGI4ZDM0MjY3NDcxNjN8fEdldElucHV0RmlsZXwxMjcxNjU0MjI2NjkxNjc4"
 type="hidden"></div>
    <input name="cmd" value="GetInputFile" type="hidden">
  </form>
  <form id="csrf-form-GetProblemText"><div style="display: none;"><input
 name="csrfmiddlewaretoken" 
value="ZGFlNDA3N2Y0ZTVhMzNmZDQ1ZWJmMDZkN2NmNzg5NDR8fEdldFByb2JsZW1UZXh0fDEyNzE2NTQyMjY2OTE5OTA="
 type="hidden"></div>
    <input name="cmd" value="GetProblemText" type="hidden">
  </form>
  <form id="csrf-form-GetContestAnalysis"><div style="display: none;"><input
 name="csrfmiddlewaretoken" 
value="ZGQwNDdlOGIyMzhiMTQyYTQ3YTM3ZDUyZjQzODY0YTB8fEdldENvbnRlc3RBbmFseXNpc3wxMjcxNjU0MjI2NjkyNTg4"
 type="hidden"></div>
    <input name="cmd" value="GetContestAnalysis" type="hidden">
  </form>
  <form id="csrf-form-SubmitAnswer"><div style="display: none;"><input 
name="csrfmiddlewaretoken" 
value="MzgwYjQ2MjA4NGIwMDFhMjBjMzQ5ZGI1ODg1MDAyZTh8fFN1Ym1pdEFuc3dlcnwxMjcxNjU0MjI2NjkyODcw"
 type="hidden"></div>
    <input name="cmd" value="SubmitAnswer" type="hidden">
  </form>
  <form id="csrf-form-AskClarification"><div style="display: none;"><input
 name="csrfmiddlewaretoken" 
value="MGRkN2FjYTgyZjAxOGQyMWUxOTExZDFkOGQ4MDlkMDB8fEFza0NsYXJpZmljYXRpb258MTI3MTY1NDIyNjY5MzEyOA=="
 type="hidden"></div>
    <input name="cmd" value="AskClarification" type="hidden">
  </form>
  <form id="csrf-form-GetUserStatus"><div style="display: none;"><input 
name="csrfmiddlewaretoken" 
value="Nzc0MWRiNmMyNjU5M2JlN2ZlNjQ2Zjk0ZTZhNjlhN2R8fEdldFVzZXJTdGF0dXN8MTI3MTY1NDIyNjY5MzMzMw=="
 type="hidden"></div>
    <input name="cmd" value="GetUserStatus" type="hidden">
  </form>
  <form id="csrf-form-GetClarifications"><div style="display: none;"><input
 name="csrfmiddlewaretoken" 
value="ZTUzMmE4YzQwNDEyOTljZGJiZmVjNDc4ZWU5YTgyMmV8fEdldENsYXJpZmljYXRpb25zfDEyNzE2NTQyMjY2OTM1Mjg="
 type="hidden"></div>
    <input name="cmd" value="GetClarifications" type="hidden">
  </form>
  <form id="csrf-form-GetSubmissionInfo"><div style="display: none;"><input
 name="csrfmiddlewaretoken" 
value="NDZlMWNmYWQ1OTNjN2YxMjJhNTc1YjcwMGQ0OWJlMjl8fEdldFN1Ym1pc3Npb25JbmZvfDEyNzE2NTQyMjY2OTM5MTM="
 type="hidden"></div>
    <input name="cmd" value="GetSubmissionInfo" type="hidden">
  </form>
  <form id="csrf-form-GetScoreboardTops"><div style="display: none;"><input
 name="csrfmiddlewaretoken" 
value="YWI0OTZkZjBiZjhmMTY0ZTE0MjkxMTEzZGMzNWRkNzh8fEdldFNjb3JlYm9hcmRUb3BzfDEyNzE2NTQyMjY2OTQyNzU="
 type="hidden"></div>
    <input name="cmd" value="GetScoreboardTops" type="hidden">
  </form>
  <form id="csrf-form-SetClarificationLastSeenTime"><div style="display:
 none;"><input name="csrfmiddlewaretoken" 
value="NGM1MTAwZmRlNTgwOGNkODE2Yzc3NDUwMjc4ZThlNzJ8fFNldENsYXJpZmljYXRpb25MYXN0U2VlblRpbWV8MTI3MTY1NDIyNjY5NDUwMQ=="
 type="hidden"></div>
    <input name="cmd" value="SetClarificationLastSeenTime" type="hidden">
  </form>
  <form id="csrf-form-GetInput"><div style="display: none;"><input 
name="csrfmiddlewaretoken" 
value="YWYyNjZkYjAxNjU1YjNkOGVhOTBlOTdhNmI4NmE2YzR8fEdldElucHV0fDEyNzE2NTQyMjY2OTQ3MDA="
 type="hidden"></div>
    <input name="cmd" value="GetInput" type="hidden">
  </form>
  <form id="csrf-form-GetOutput"><div style="display: none;"><input 
name="csrfmiddlewaretoken" 
value="NTRmOTNlY2Q1ZTYyZmFhMzhlZTRiMzMyYTYwZGUyZDJ8fEdldE91dHB1dHwxMjcxNjU0MjI2Njk0OTEw"
 type="hidden"></div>
    <input name="cmd" value="GetOutput" type="hidden">
  </form>
  <form id="csrf-form-GetSource"><div style="display: none;"><input 
name="csrfmiddlewaretoken" 
value="MDlkNWRiODJiZDc1MDJkNGE1OWViNThjMzY1ZmQyMDJ8fEdldFNvdXJjZXwxMjcxNjU0MjI2Njk1MTE1"
 type="hidden"></div>
    <input name="cmd" value="GetSource" type="hidden">
  </form>
  <form id="csrf-form-GetInitialValues"><div style="display: none;"><input
 name="csrfmiddlewaretoken" 
value="MTI3NDE2OTA2M2MwYWI2MzYwNGY0YzQxY2Y4Zjk1OTh8fEdldEluaXRpYWxWYWx1ZXN8MTI3MTY1NDIyNjY5NTMwOQ=="
 type="hidden"></div>
    <input name="cmd" value="GetInitialValues" type="hidden">
  </form>
</div>


<div style="display: block;" id="dsb-page-body">

<div id="left-panel">
  <div class="v-divider"></div>
  <div class="v-divider"></div>
  <div class="v-divider"></div>
  <!-- Problem Selection Panel -->
  <div id="dsb-contest-title">GCJ 2009 World Final</div>
  <hr class="dsb-hr">
  <div>
    
    <div id="dsb-problem-tab0" class="dsb-problem-tab-open">
      <div id="dsb-problem-title0" class="dynamic-link">
        A. Year of More Code Jam
      </div>
    </div>
    
    <div id="dsb-problem-tab1" class="dsb-problem-tab-close">
      <div id="dsb-problem-title1" class="dynamic-link">
        B. Min Perimeter
      </div>
    </div>
    
    <div id="dsb-problem-tab2" class="dsb-problem-tab-close">
      <div id="dsb-problem-title2" class="dynamic-link">
        C. Doubly-sorted Grid
      </div>
    </div>
    
    <div id="dsb-problem-tab3" class="dsb-problem-tab-close">
      <div id="dsb-problem-title3" class="dynamic-link">
        D. Wi-fi Towers
      </div>
    </div>
    
    <div id="dsb-problem-tab4" class="dsb-problem-tab-close">
      <div id="dsb-problem-title4" class="dynamic-link">
        E. Marbles
      </div>
    </div>
    
    <div id="dsb-problem-tab5" class="dsb-problem-tab-close">
      <div id="dsb-problem-title5" class="dynamic-link">
        F. Lights
      </div>
    </div>
    
  </div>
  <hr class="dsb-hr">
  <div class="v-divider"></div>
  <div class="v-divider"></div>
  <div style="display: block;" id="dsb-analysis-button" 
class="dsb-anal-tab-close">
    <div class="dynamic-link">
       <div id="dsb-analysis-tab">
         Contest Analysis
       </div>
    </div>
  </div>
  <div id="dsb-ask-question-button" class="dsb-clar-tab-close">
    <div class="dynamic-link">
       <div class="dsb-has-new-question-tab" id="dsb-ask-question-tab">Questions
 asked (1)</div>
    </div>
  </div>
  <div style="display: none;" id="dsb-submissions-button" 
class="dsb-submissions-tab-close">
    <div class="dynamic-link">
      <div id="dsb-submissions-tab">
        View my submissions
      </div>
    </div>
  </div>
  <div class="v-divider"></div>
  <div class="v-divider"></div>
  <div class="dsb-mini-tab-wrapper">
  <div id="dsb-status-div">
    <div id="dsb-status-header-div" 
onmouseover="this.style.cursor='pointer'" onclick="GCJ.toggleVisibility(
            'dsb-status-tab',
            'dsb-status-panel-button',
            '/codejam/contest/static/minus.gif',
            '/codejam/contest/static/plus.gif')">
        <img id="dsb-status-panel-button" 
src="year%20of%20more%20code%20jam_files/minus.gif">
        &nbsp; Submissions
    </div>
    <div style="display: block;" id="dsb-status-tab">
    
      <div id="problemStatusWrapper0" class="problemStatusWrapper">
        <div class="dsb-status-problem-title">Year of More Code Jam</div>
        
        <!-- Input Stats -->
        <table class="problemStatus">
        <tbody>
          <tr class="inputSetStatus">
            <td id="inputName0_0" class="inputName">5pt</td>
            <td class="status">
              <div id="selfStat0_0" 
class="dsb-mini-status-non-highlight">No submissions</div>
              <div style="display: block;" id="globalStat0_0" 
class="globalStat"><b>16/17 users</b>  correct (94%)</div>
            </td>
          </tr>
        </tbody>
        </table>
        
        <!-- Input Stats -->
        <table class="problemStatus">
        <tbody>
          <tr class="inputSetStatus">
            <td id="inputName0_1" class="inputName">12pt</td>
            <td class="status">
              <div id="selfStat0_1" 
class="dsb-mini-status-non-highlight">No submissions</div>
              <div style="display: block;" id="globalStat0_1" 
class="globalStat"><b>9/15 users</b>  correct (60%)</div>
            </td>
          </tr>
        </tbody>
        </table>
        
      </div>
    
      <div id="problemStatusWrapper1" class="problemStatusWrapper">
        <div class="dsb-status-problem-title">Min Perimeter</div>
        
        <!-- Input Stats -->
        <table class="problemStatus">
        <tbody>
          <tr class="inputSetStatus">
            <td id="inputName1_0" class="inputName">5pt</td>
            <td class="status">
              <div id="selfStat1_0" 
class="dsb-mini-status-non-highlight">No submissions</div>
              <div style="display: block;" id="globalStat1_0" 
class="globalStat"><b>17/19 users</b>  correct (89%)</div>
            </td>
          </tr>
        </tbody>
        </table>
        
        <!-- Input Stats -->
        <table class="problemStatus">
        <tbody>
          <tr class="inputSetStatus">
            <td id="inputName1_1" class="inputName">15pt</td>
            <td class="status">
              <div id="selfStat1_1" 
class="dsb-mini-status-non-highlight">No submissions</div>
              <div style="display: block;" id="globalStat1_1" 
class="globalStat"><b>4/13 users</b>  correct (31%)</div>
            </td>
          </tr>
        </tbody>
        </table>
        
      </div>
    
      <div id="problemStatusWrapper2" class="problemStatusWrapper">
        <div class="dsb-status-problem-title">Doubly-sorted Grid</div>
        
        <!-- Input Stats -->
        <table class="problemStatus">
        <tbody>
          <tr class="inputSetStatus">
            <td id="inputName2_0" class="inputName">10pt</td>
            <td class="status">
              <div id="selfStat2_0" 
class="dsb-mini-status-non-highlight">No submissions</div>
              <div style="display: block;" id="globalStat2_0" 
class="globalStat"><b>16/16 users</b>  correct (100%)</div>
            </td>
          </tr>
        </tbody>
        </table>
        
        <!-- Input Stats -->
        <table class="problemStatus">
        <tbody>
          <tr class="inputSetStatus">
            <td id="inputName2_1" class="inputName">20pt</td>
            <td class="status">
              <div id="selfStat2_1" 
class="dsb-mini-status-non-highlight">No submissions</div>
              <div style="display: block;" id="globalStat2_1" 
class="globalStat"><b>4/5 users</b>  correct (80%)</div>
            </td>
          </tr>
        </tbody>
        </table>
        
      </div>
    
      <div id="problemStatusWrapper3" class="problemStatusWrapper">
        <div class="dsb-status-problem-title">Wi-fi Towers</div>
        
        <!-- Input Stats -->
        <table class="problemStatus">
        <tbody>
          <tr class="inputSetStatus">
            <td id="inputName3_0" class="inputName">3pt</td>
            <td class="status">
              <div id="selfStat3_0" 
class="dsb-mini-status-non-highlight">No submissions</div>
              <div style="display: block;" id="globalStat3_0" 
class="globalStat"><b>22/22 users</b>  correct (100%)</div>
            </td>
          </tr>
        </tbody>
        </table>
        
        <!-- Input Stats -->
        <table class="problemStatus">
        <tbody>
          <tr class="inputSetStatus">
            <td id="inputName3_1" class="inputName">25pt</td>
            <td class="status">
              <div id="selfStat3_1" 
class="dsb-mini-status-non-highlight">No submissions</div>
              <div style="display: block;" id="globalStat3_1" 
class="globalStat"><b>9/12 users</b>  correct (75%)</div>
            </td>
          </tr>
        </tbody>
        </table>
        
      </div>
    
      <div id="problemStatusWrapper4" class="problemStatusWrapper">
        <div class="dsb-status-problem-title">Marbles</div>
        
        <!-- Input Stats -->
        <table class="problemStatus">
        <tbody>
          <tr class="inputSetStatus">
            <td id="inputName4_0" class="inputName">7pt</td>
            <td class="status">
              <div id="selfStat4_0" 
class="dsb-mini-status-non-highlight">No submissions</div>
              <div style="display: block;" id="globalStat4_0" 
class="globalStat"><b>16/19 users</b>  correct (84%)</div>
            </td>
          </tr>
        </tbody>
        </table>
        
        <!-- Input Stats -->
        <table class="problemStatus">
        <tbody>
          <tr class="inputSetStatus">
            <td id="inputName4_1" class="inputName">32pt</td>
            <td class="status">
              <div id="selfStat4_1" 
class="dsb-mini-status-non-highlight">No submissions</div>
              <div style="display: block;" id="globalStat4_1" 
class="globalStat"><b>2/8 users</b>  correct (25%)</div>
            </td>
          </tr>
        </tbody>
        </table>
        
      </div>
    
      <div id="problemStatusWrapper5" class="problemStatusWrapper">
        <div class="dsb-status-problem-title">Lights</div>
        
        <!-- Input Stats -->
        <table class="problemStatus">
        <tbody>
          <tr class="inputSetStatus">
            <td id="inputName5_0" class="inputName">21pt</td>
            <td class="status">
              <div id="selfStat5_0" 
class="dsb-mini-status-non-highlight">No submissions</div>
              <div style="display: block;" id="globalStat5_0" 
class="globalStat"><b>2/4 users</b>  correct (50%)</div>
            </td>
          </tr>
        </tbody>
        </table>
        
        <!-- Input Stats -->
        <table class="problemStatus">
        <tbody>
          <tr class="inputSetStatus">
            <td id="inputName5_1" class="inputName">45pt</td>
            <td class="status">
              <div id="selfStat5_1" 
class="dsb-mini-status-non-highlight">No submissions</div>
              <div style="display: block;" id="globalStat5_1" 
class="globalStat"><b>1/2 users</b>  correct (50%)</div>
            </td>
          </tr>
        </tbody>
        </table>
        
      </div>
    
    </div>
  </div>
  </div>
  <div class="v-divider"></div>
  <div class="v-divider"></div>
  <!-- Mini Scoreboard -->
  <div class="dsb-mini-tab-wrapper">
    <div id="dsb-scoreboard-div">
      <div id="dsb-scoreboard-header-div" 
onmouseover="this.style.cursor='pointer'" onclick="GCJ.toggleVisibility(
              'dsb-scoreboard-table',
              'dsb-scoreboard-panel-button',
              '/codejam/contest/static/minus.gif',
              '/codejam/contest/static/plus.gif')">
          <img id="dsb-scoreboard-panel-button" 
src="year%20of%20more%20code%20jam_files/minus.gif">
          &nbsp; Top Scores
      </div>
      <div id="dsb-scoreboard-table-wrap"><table style="display: block;"
 id="dsb-scoreboard-table"><tbody><tr class="dsb-scoreboard-row-even"><td
 title="" class="dsb-name-td" id="sbName_0">ACRush</td><td 
class="dsb-score-td" id="sbScore_0">168</td></tr><tr 
class="dsb-scoreboard-row-odd"><td title="" class="dsb-name-td" 
id="sbName_1">qizichao</td><td class="dsb-score-td" id="sbScore_1">87</td></tr><tr
 class="dsb-scoreboard-row-even"><td title="" class="dsb-name-td" 
id="sbName_2">wata</td><td class="dsb-score-td" id="sbScore_2">81</td></tr><tr
 class="dsb-scoreboard-row-odd"><td title="" class="dsb-name-td" 
id="sbName_3">ZhukovDmitry</td><td class="dsb-score-td" id="sbScore_3">70</td></tr><tr
 class="dsb-scoreboard-row-even"><td title="" class="dsb-name-td" 
id="sbName_4">dzhulgakov</td><td class="dsb-score-td" id="sbScore_4">69</td></tr><tr
 class="dsb-scoreboard-row-odd"><td title="" class="dsb-name-td" 
id="sbName_5">nika</td><td class="dsb-score-td" id="sbScore_5">62</td></tr><tr
 class="dsb-scoreboard-row-even"><td title="" class="dsb-name-td" 
id="sbName_6">Vitaliy</td><td class="dsb-score-td" id="sbScore_6">62</td></tr><tr
 class="dsb-scoreboard-row-odd"><td title="" class="dsb-name-td" 
id="sbName_7">kalinov</td><td class="dsb-score-td" id="sbScore_7">55</td></tr><tr
 class="dsb-scoreboard-row-even"><td title="" class="dsb-name-td" 
id="sbName_8">halyavin</td><td class="dsb-score-td" id="sbScore_8">54</td></tr><tr
 class="dsb-scoreboard-row-odd"><td title="" class="dsb-name-td" 
id="sbName_9">bmerry</td><td class="dsb-score-td" id="sbScore_9">50</td></tr></tbody></table></div>
      <div class="dsb-mini-tab-link">
        <a target="new" 
href="http://code.google.com/codejam/contest/scoreboard?c=311101">
          Full scoreboard
        </a>
      </div>
    </div>
  </div>
</div>

<div id="right-panel">
  <div id="dsb-status-msg-wrapper" class="dsb-status-msg-wrapper">
    <div id="dsb-status-msg" class="dsb-status-msg">
      <span id="dsb-status-msg-text"></span>
      <span id="dsb-view-it-link">View it.</span>
    </div>
  </div>

  <div id="dsb-contest-title-bar">
  <div id="dsb-rank-etc">
    <div id="dsb-time-remaining">Practice Mode</div>
    <div style="display: none;" id="dsb-current-rank-div">
      Rank: <span id="dsb-current-rank-span"></span>
    </div>
    <div style="display: none;" id="dsb-current-score-div">
      Score: <span id="dsb-current-score-span"></span>
    </div>
  </div>
  
    <a 
href="https://www.google.com/accounts/ServiceLogin?service=ah&amp;continue=http://code.google.com/_ah/login%3Fcontinue%3Dhttp://code.google.com/codejam/contest/dashboard%253Fc%253D311101&amp;ltmpl=&amp;sig=710a31ba5fee1437f1a55b2c3504cf49">Sign
 in</a>
  
  </div>

  <!-- Problem Statement -->
  <div id="main-panel-border" class="dsb-blue-border">
  <div id="dsb-border-inner">
    <!-- Problem Statement Title -->
    <div id="dsb-problem-title-div">Year of More Code Jam</div>

    
    <div style="display: block;" id="dsb-problem-page0" 
class="dsb-content-pages">
      <!-- Problem Input File Selection -->
      <div class="dsb-input-panel-text"><span style="color: rgb(102, 
102, 102);">In the practice contest, you may try as many times as you 
want.</span></div>
      <table><tbody id="dsb-input-form-table0"><tr><td 
class="dsb-input-table-description">Small input<br>5 points</td><td 
class="dsb-input-table-linktd"><div style="display: inline;" 
class="dsb-input-wrapper" id="dsb-input-wrapper0-0"><span 
id="dsb-input-link-plain0-0" class="dsb-input-link-span"><img 
src="year%20of%20more%20code%20jam_files/file.gif" 
class="dsb-input-link-img"><span id="dsb-input-link-plain-text0-0" 
class="dsb-input-link-text">Download A-small.in</span></span><span 
id="dsb-input-more-options-link0-0" class="dsb-input-more-options">More 
options  &nbsp; <span style="font-size: 80%;">▼</span></span></div><span
 style="display: inline;" id="dsb-submission-switch0-0" 
class="dsb-submission-switch">Submit</span><span style="display: none;" 
id="dsb-input-table-caption0-0" class="dsb-input-table-caption"></span><span
 style="display: none;" id="dsb-resubmit-caption0-0" 
class="dsb-input-table-caption">Your submission was received. You can 
still <span class="dsb-input-link-text">resubmit</span> for <span 
id="dsb-resubmit-timer0-0"></span> minutes.<br> Only your last 
submission counts.</span><div><div style="display: none;" 
id="dsb-submit-form-div0-0" class="dsb-submit-form-div"><div 
style="display: none;"><b>Time Remaining:</b> <span id="io_timer_0"></span>&nbsp;&nbsp;</div><div
 style="display: none;"><b>Input:</b> A-small-practice.in.</div><form 
id="submit-formio_timer_0" action="/codejam/contest/dashboard/do" 
enctype="multipart/form-data" method="post"><input 
name="csrfmiddlewaretoken" 
value="MzgwYjQ2MjA4NGIwMDFhMjBjMzQ5ZGI1ODg1MDAyZTh8fFN1Ym1pdEFuc3dlcnwxMjcxNjU0MjI2NjkyODcw"
 type="hidden"><div class="dsb-submit-form-separator">your output file:<input
 id="output-fileio_timer_0" name="answer" class="submitFormFile" 
type="file"></div><div style="display: none;"><table 
class="dsb-source-code-table"><tbody><tr><td style="padding: 0.4em 0.2em
 0pt 0pt;">source file(s):&nbsp;&nbsp;</td><td><div 
id="source-filesio_timer_0"><div id="input-file-divio_timer_0-0"><span 
id="source-fileio_timer_0-0"><input class="submitFormFile" 
name="source-file0" type="file"></span><span style="visibility: hidden;"
 class="dsb-submit-form-links" id="remove-source-fileio_timer_0-0">remove</span></div></div><span
 id="add-source-fileio_timer_0" class="dsb-submit-form-links">Add 
another file</span></td></tr></tbody></table></div><div 
class="dsb-submit-form-separator" style="color: gray;">source file(s): 
&nbsp;&nbsp;&nbsp;not needed for the practice contest</div><div 
class="dsb-submit-form-separator" style="text-align: center;"><input 
id="submit-buttonio_timer_0" value="Submit file" type="button">&nbsp;&nbsp;<input
 id="dsb-hide-submissionio_timer_0" value="Hide" type="button"></div><div
 id="source-file-namesio_timer_0"></div><input name="cmd" 
value="SubmitAnswer" type="hidden"><input name="contest" value="311101" 
type="hidden"><input name="problem" value="322102" type="hidden"><input 
name="input_id" value="0" type="hidden"><input name="num_source_files" 
id="num-source-filesio_timer_0" value="1" type="hidden"></form></div></div></td></tr><tr><td
 class="dsb-input-table-description">Large input<br>12 points</td><td 
class="dsb-input-table-linktd"><div style="display: inline;" 
class="dsb-input-wrapper" id="dsb-input-wrapper0-1"><span 
id="dsb-input-link-plain0-1" class="dsb-input-link-span"><img 
src="year%20of%20more%20code%20jam_files/file.gif" 
class="dsb-input-link-img"><span id="dsb-input-link-plain-text0-1" 
class="dsb-input-link-text">Download A-large.in</span></span><span 
id="dsb-input-more-options-link0-1" class="dsb-input-more-options">More 
options  &nbsp; <span style="font-size: 80%;">▼</span></span></div><span
 style="display: inline;" id="dsb-submission-switch0-1" 
class="dsb-submission-switch">Submit</span><span style="display: none;" 
id="dsb-input-table-caption0-1" class="dsb-input-table-caption"></span><span
 style="display: none;" id="dsb-resubmit-caption0-1" 
class="dsb-input-table-caption">Your submission was received. You can 
still <span class="dsb-input-link-text">resubmit</span> for <span 
id="dsb-resubmit-timer0-1"></span> minutes.<br> Only your last 
submission counts.</span><div><div style="display: none;" 
id="dsb-submit-form-div0-1" class="dsb-submit-form-div"><div 
style="display: none;"><b>Time Remaining:</b> <span id="io_timer_1"></span>&nbsp;&nbsp;</div><div
 style="display: none;">You may resubmit this multiple times within the 
remaining<br>time-frame. Only your last submission will count.</div><form
 id="submit-formio_timer_1" action="/codejam/contest/dashboard/do" 
enctype="multipart/form-data" method="post"><input 
name="csrfmiddlewaretoken" 
value="MzgwYjQ2MjA4NGIwMDFhMjBjMzQ5ZGI1ODg1MDAyZTh8fFN1Ym1pdEFuc3dlcnwxMjcxNjU0MjI2NjkyODcw"
 type="hidden"><div class="dsb-submit-form-separator">your output file:<input
 id="output-fileio_timer_1" name="answer" class="submitFormFile" 
type="file"></div><div style="display: none;"><table 
class="dsb-source-code-table"><tbody><tr><td style="padding: 0.4em 0.2em
 0pt 0pt;">source file(s):&nbsp;&nbsp;</td><td><div 
id="source-filesio_timer_1"><div id="input-file-divio_timer_1-0"><span 
id="source-fileio_timer_1-0"><input class="submitFormFile" 
name="source-file0" type="file"></span><span style="visibility: hidden;"
 class="dsb-submit-form-links" id="remove-source-fileio_timer_1-0">remove</span></div></div><span
 id="add-source-fileio_timer_1" class="dsb-submit-form-links">Add 
another file</span></td></tr></tbody></table></div><div 
class="dsb-submit-form-separator" style="color: gray;">source file(s): 
&nbsp;&nbsp;&nbsp;not needed for the practice contest</div><div 
class="dsb-submit-form-separator" style="text-align: center;"><input 
id="submit-buttonio_timer_1" value="Submit file" type="button">&nbsp;&nbsp;<input
 id="dsb-hide-submissionio_timer_1" value="Hide" type="button"></div><div
 id="source-file-namesio_timer_1"></div><input name="cmd" 
value="SubmitAnswer" type="hidden"><input name="contest" value="311101" 
type="hidden"><input name="problem" value="322102" type="hidden"><input 
name="input_id" value="1" type="hidden"><input name="num_source_files" 
id="num-source-filesio_timer_1" value="1" type="hidden"></form></div></div></td></tr></tbody></table>
      <!-- Problem Statement -->
      <div id="dsb-problem-content-div0" class="dsb-problem-content-div"><p
 class="problem-item">Problem</p>
<p>
A new year brings a new calendar, new challenges, and a lot of new fun 
in life. Some things, however, never change. There are still many great 
programming contests to be held, and our heroine Sphinny's passion for 
them remains unchanged.
</p>
<p>
There are several tournaments Sphinny is interested in.  Each tournament
 will consist of a number of rounds.  The organizer of each tournament 
has not decided on what date the tournament will start, but has decided 
how many rounds there will be in the tournament and how many days after 
the start date each round will be.
</p>
<p>
In some situations, two or more rounds (from different tournaments) can 
be scheduled on the same day. As Sphinny is so keen on problem solving, 
she will be happier if more rounds are scheduled on the same day. Her 
happiness value is computed as follows: for each day on which there are <i>S</i>
 rounds, her happiness will be increased by <i>S</i><sup>2</sup>.  Her 
happiness starts at 0 (don't worry — 0 is a happy place to start).
</p>
<p>
In the picture below there are three tournaments, each represented by a 
different color, and Sphinny's total happiness is 20.  One tournament 
starts on the second day of the year, one starts on the fifth day of the
 year, and one starts on the sixth day of the year.
<br><br><br>
<img src="year%20of%20more%20code%20jam_files/a_002.png">
<br><br><br>
</p>
<p>
There are <b>N</b> days in the year. Each tournament will begin on any 
of the <b>N</b> days with equal probability. The big question for this 
year is what the expected value of Sphinny's happiness is.
</p>
<p>
As a perfectionist, she is not going to solve the problem approximately.
 Instead, she wants to know the result exactly. The number of 
tournaments is <b>T</b>, and there are <b>N</b><sup>T</sup> equally 
likely ways to select the start dates of the tournaments. She is going 
to express her expected happiness as <i>K</i>+<i>A</i>/<i>B</i>, where <i>K</i>
 and <i>B</i> are positive integers and <i>A</i> is a non-negative 
integer less than <i>B</i>. If <i>A</i> is zero then <i>B</i> must be 
one, otherwise <i>A</i> and <i>B</i> must not have a common factor 
greater than one.
</p>
<p>
If a tournament starts late enough in the year, some of its rounds might
 be scheduled during the next year.  Those rounds do not contribute to 
Sphinny's happiness this year.
</p>

<p class="problem-item">Input</p>
<p>
The first line of the input is a single integer <b>C</b>, the number of 
test cases. <b>C</b> tests follow. The first line of each test case is 
in the form
</p><pre>N T
</pre>
where <b>N</b> is the number of days in the year, and <b>T</b> is the 
number of tournaments. <b>T</b> lines then follow, one for each 
tournament, in the format
<pre>m d<sub>2</sub> d<sub>3</sub> ... d<sub>m</sub>
</pre>
indicating that there are <b>m</b> rounds, and the i-th round will be 
held on day <b>d</b><sub>i</sub> of the tournament. The first round of a
 tournament is held on day 1 (<b>d</b><sub>1</sub> = 1).


<p class="problem-item">Output</p>
<p>
For each test, output one line of the form
</p><pre>Case #X: K+A/B</pre>
where <i>X</i> is the case number, starting from 1, and <i>K</i>, <i>A</i>
 and <i>B</i> are as described above.


<p class="problem-item">Limits</p>
<p>
1 ≤ <b>C</b> ≤ 50<br>
1 ≤ <b>N</b> ≤ 10<sup>9</sup><br>
2 ≤ <b>m</b> ≤ 50<br>
1 &lt; <b>d</b><sub>2</sub> &lt; <b>d</b><sub>3</sub> &lt; ... &lt; <b>d</b><sub>m</sub>
 ≤ 10000
</p>

<p class="problem-item">Small dataset</p>
<p>
1 ≤ <b>T</b> ≤ 2
</p>

<p class="problem-item">Large dataset</p>
<p>
1 ≤ <b>T</b> ≤ 50
</p>


<p class="problem-item">Sample</p>
<div class="problem-io-wrapper">
<table>
<tbody><tr>
<td>
<br>
<span class="problem-item-gray">Input</span>
<br>&nbsp;
</td>
<td>
<br>
<span class="problem-item-gray">Output</span>
<br>&nbsp;
</td>
</tr>
<tr>
<td>
<code>
3 <br>
1 1 <br>
2 2 <br>
4 2 <br>
3 2 4 <br>
2 3 <br>
10 3 <br>
4 2 5 9 <br>
3 4 8 <br>
5 2 3 9 12 <br>
</code>
</td>
<td>
<code>
Case #1: 1+0/1 <br>
Case #2: 5+1/8 <br>
Case #3: 11+19/25 <br>
</code>
</td></tr></tbody></table>
</div>

</div>
    </div>
    
    <div id="dsb-problem-page1" class="dsb-content-pages">
      <!-- Problem Input File Selection -->
      <div class="dsb-input-panel-text"><span style="color: rgb(102, 
102, 102);">In the practice contest, you may try as many times as you 
want.</span></div>
      <table><tbody id="dsb-input-form-table1"><tr><td 
class="dsb-input-table-description">Small input<br>5 points</td><td 
class="dsb-input-table-linktd"><div style="display: inline;" 
class="dsb-input-wrapper" id="dsb-input-wrapper1-0"><span 
id="dsb-input-link-plain1-0" class="dsb-input-link-span"><img 
src="year%20of%20more%20code%20jam_files/file.gif" 
class="dsb-input-link-img"><span id="dsb-input-link-plain-text1-0" 
class="dsb-input-link-text">Download B-small.in</span></span><span 
id="dsb-input-more-options-link1-0" class="dsb-input-more-options">More 
options  &nbsp; <span style="font-size: 80%;">▼</span></span></div><span
 style="display: inline;" id="dsb-submission-switch1-0" 
class="dsb-submission-switch">Submit</span><span style="display: none;" 
id="dsb-input-table-caption1-0" class="dsb-input-table-caption"></span><span
 style="display: none;" id="dsb-resubmit-caption1-0" 
class="dsb-input-table-caption">Your submission was received. You can 
still <span class="dsb-input-link-text">resubmit</span> for <span 
id="dsb-resubmit-timer1-0"></span> minutes.<br> Only your last 
submission counts.</span><div><div style="display: none;" 
id="dsb-submit-form-div1-0" class="dsb-submit-form-div"><div 
style="display: none;"><b>Time Remaining:</b> <span id="io_timer_2"></span>&nbsp;&nbsp;</div><div
 style="display: none;"><b>Input:</b> B-small-practice.in.</div><form 
id="submit-formio_timer_2" action="/codejam/contest/dashboard/do" 
enctype="multipart/form-data" method="post"><input 
name="csrfmiddlewaretoken" 
value="MzgwYjQ2MjA4NGIwMDFhMjBjMzQ5ZGI1ODg1MDAyZTh8fFN1Ym1pdEFuc3dlcnwxMjcxNjU0MjI2NjkyODcw"
 type="hidden"><div class="dsb-submit-form-separator">your output file:<input
 id="output-fileio_timer_2" name="answer" class="submitFormFile" 
type="file"></div><div style="display: none;"><table 
class="dsb-source-code-table"><tbody><tr><td style="padding: 0.4em 0.2em
 0pt 0pt;">source file(s):&nbsp;&nbsp;</td><td><div 
id="source-filesio_timer_2"><div id="input-file-divio_timer_2-0"><span 
id="source-fileio_timer_2-0"><input class="submitFormFile" 
name="source-file0" type="file"></span><span style="visibility: hidden;"
 class="dsb-submit-form-links" id="remove-source-fileio_timer_2-0">remove</span></div></div><span
 id="add-source-fileio_timer_2" class="dsb-submit-form-links">Add 
another file</span></td></tr></tbody></table></div><div 
class="dsb-submit-form-separator" style="color: gray;">source file(s): 
&nbsp;&nbsp;&nbsp;not needed for the practice contest</div><div 
class="dsb-submit-form-separator" style="text-align: center;"><input 
id="submit-buttonio_timer_2" value="Submit file" type="button">&nbsp;&nbsp;<input
 id="dsb-hide-submissionio_timer_2" value="Hide" type="button"></div><div
 id="source-file-namesio_timer_2"></div><input name="cmd" 
value="SubmitAnswer" type="hidden"><input name="contest" value="311101" 
type="hidden"><input name="problem" value="317103" type="hidden"><input 
name="input_id" value="0" type="hidden"><input name="num_source_files" 
id="num-source-filesio_timer_2" value="1" type="hidden"></form></div></div></td></tr><tr><td
 class="dsb-input-table-description">Large input<br>15 points</td><td 
class="dsb-input-table-linktd"><div style="display: inline;" 
class="dsb-input-wrapper" id="dsb-input-wrapper1-1"><span 
id="dsb-input-link-plain1-1" class="dsb-input-link-span"><img 
src="year%20of%20more%20code%20jam_files/file.gif" 
class="dsb-input-link-img"><span id="dsb-input-link-plain-text1-1" 
class="dsb-input-link-text">Download B-large.in</span></span><span 
id="dsb-input-more-options-link1-1" class="dsb-input-more-options">More 
options  &nbsp; <span style="font-size: 80%;">▼</span></span></div><span
 style="display: inline;" id="dsb-submission-switch1-1" 
class="dsb-submission-switch">Submit</span><span style="display: none;" 
id="dsb-input-table-caption1-1" class="dsb-input-table-caption"></span><span
 style="display: none;" id="dsb-resubmit-caption1-1" 
class="dsb-input-table-caption">Your submission was received. You can 
still <span class="dsb-input-link-text">resubmit</span> for <span 
id="dsb-resubmit-timer1-1"></span> minutes.<br> Only your last 
submission counts.</span><div><div style="display: none;" 
id="dsb-submit-form-div1-1" class="dsb-submit-form-div"><div 
style="display: none;"><b>Time Remaining:</b> <span id="io_timer_3"></span>&nbsp;&nbsp;</div><div
 style="display: none;">You may resubmit this multiple times within the 
remaining<br>time-frame. Only your last submission will count.</div><form
 id="submit-formio_timer_3" action="/codejam/contest/dashboard/do" 
enctype="multipart/form-data" method="post"><input 
name="csrfmiddlewaretoken" 
value="MzgwYjQ2MjA4NGIwMDFhMjBjMzQ5ZGI1ODg1MDAyZTh8fFN1Ym1pdEFuc3dlcnwxMjcxNjU0MjI2NjkyODcw"
 type="hidden"><div class="dsb-submit-form-separator">your output file:<input
 id="output-fileio_timer_3" name="answer" class="submitFormFile" 
type="file"></div><div style="display: none;"><table 
class="dsb-source-code-table"><tbody><tr><td style="padding: 0.4em 0.2em
 0pt 0pt;">source file(s):&nbsp;&nbsp;</td><td><div 
id="source-filesio_timer_3"><div id="input-file-divio_timer_3-0"><span 
id="source-fileio_timer_3-0"><input class="submitFormFile" 
name="source-file0" type="file"></span><span style="visibility: hidden;"
 class="dsb-submit-form-links" id="remove-source-fileio_timer_3-0">remove</span></div></div><span
 id="add-source-fileio_timer_3" class="dsb-submit-form-links">Add 
another file</span></td></tr></tbody></table></div><div 
class="dsb-submit-form-separator" style="color: gray;">source file(s): 
&nbsp;&nbsp;&nbsp;not needed for the practice contest</div><div 
class="dsb-submit-form-separator" style="text-align: center;"><input 
id="submit-buttonio_timer_3" value="Submit file" type="button">&nbsp;&nbsp;<input
 id="dsb-hide-submissionio_timer_3" value="Hide" type="button"></div><div
 id="source-file-namesio_timer_3"></div><input name="cmd" 
value="SubmitAnswer" type="hidden"><input name="contest" value="311101" 
type="hidden"><input name="problem" value="317103" type="hidden"><input 
name="input_id" value="1" type="hidden"><input name="num_source_files" 
id="num-source-filesio_timer_3" value="1" type="hidden"></form></div></div></td></tr></tbody></table>
      <!-- Problem Statement -->
      <div id="dsb-problem-content-div1" class="dsb-problem-content-div"><p
 class="problem-item">Problem</p>
<p>
You will be given a set of points with integer coordinates. You are 
asked to compute the smallest perimeter of a triangle with distinct 
vertexes from this set of points.
</p>

<p class="problem-item">Input</p>
<p>When you are ready to submit a solution, the file you will download 
will contain Java source code that produces the input data. You should 
compile and run that program (see details at the bottom of the problem 
statement), and it will print the input data for the problem to the 
standard output stream. The program is guaranteed to run within 30 
seconds for the small input, and 90 seconds for the large input if you 
don't have other resource-intensive processes running.</p>
<p>The first line of the input data gives you the number of cases, <b>T</b>.
 <b>T</b> test cases follow. Each test case contains on the first line 
the integer <b>n</b>, the number of points in the set. <b>n</b> lines 
follow, each line containing two integer numbers <b>x<sub>i</sub></b>, <b>y<sub>i</sub></b>.
 These are the coordinates of the i-th point. There may not be more than
 one point at the same coordinates.</p>

<p class="problem-item">Output</p>
For each test case, output:
<pre>Case #<b>X</b>: <b>Y</b></pre>

where <b>X</b> is the number of the test case and Y is the minimum 
perimeter. Answers with a relative or absolute error of at most 10<sup>-9</sup>
 will be considered correct. Degenerate triangles&nbsp;—&nbsp;triangles 
with zero area&nbsp;—&nbsp;are ok.

<p class="problem-item">Limits</p>
1 &lt;= <b>T</b> &lt;= 15<br>
0 &lt;= <b>x<sub>i</sub></b>, <b>y<sub>i</sub></b> &lt;= 10<sup>9</sup>

<p class="problem-item">Small dataset</p>
3 &lt;= <b>n</b> &lt;= 10000

<p class="problem-item">Large dataset</p>
3 &lt;= <b>n</b> &lt;= 1000000
<p class="problem-item">Sample</p>
<div class="problem-io-wrapper">
<table>
<tbody><tr>
<td>
<br>
<span class="problem-item-gray">Input</span>
<br>&nbsp;
</td>
</tr>
<tr>
<td>
<code>
public class Input {<br>
&nbsp;&nbsp;public static void main(String[] args) {<br>
&nbsp;&nbsp;&nbsp;&nbsp;// T = 1<br>
&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(1);<br>
&nbsp;&nbsp;&nbsp;&nbsp;// n = 10<br>
&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(10);<br>
&nbsp;&nbsp;&nbsp;&nbsp;// (x[i], y[i]) = (i, i)<br>
&nbsp;&nbsp;&nbsp;&nbsp;for (int i = 0; i &lt; 10; i++)<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println("" + i + " " + 
i);<br>
&nbsp;&nbsp;}<br>
}<br>
</code>
</td></tr>
<tr>
<td>
<br>
<span class="problem-item-gray">Output</span>
<br>&nbsp;
</td>
</tr>
<tr>
<td>
<code>
Case #1: 5.656854
</code>
</td></tr></tbody></table>
</div>
<p class="problem-item">How to compile and run downloaded Java program</p>
Once you're ready to submit a solution, download the program, and run it
 using the following instructions to get the input file:
<br>
<br>
<br>
Linux instructions:
<ol>
<li>Rename the file to "Input.java" (without quotes).
</li><li>Start a console shell (Applications -&gt; Accessories -&gt; 
Terminal) and set the current directory to the location of the file ("cd
 &lt;directory name&gt;").
</li><li>Run <pre>/usr/lib/jvm/java-6-sun/bin/javac Input.java</pre> to 
compile the program.
</li><li>Run <pre>/usr/lib/jvm/java-6-sun/bin/java -Xmx512M Input &gt;test.txt </pre>
 to run the program and save the results to a file named "test.txt". Now
 that file contains the testcase that you need to solve.
</li></ol>
<br>
<br>
Windows instructions:
<ol>
<li>Rename the file to "Input.java" (without quotes).
</li><li>Start a console shell (Start-&gt;Run-&gt;cmd.exe and set the 
current directory to the location of the file ("cd &lt;directory 
name&gt;").
</li><li>Run 
<pre>"C:\Program Files\Java\jdk1.6.0_16\bin\javac" Input.java</pre> to 
compile the program.
</li><li>Run <pre>"C:\Program Files\Java\jdk1.6.0_16\bin\java" -Xmx512M Input &gt;test.txt</pre>
 to run the program and save the results to a file named "test.txt". Now
 that file contains the testcase that you need to solve.
</li></ol></div>
    </div>
    
    <div id="dsb-problem-page2" class="dsb-content-pages">
      <!-- Problem Input File Selection -->
      <div class="dsb-input-panel-text"><span style="color: rgb(102, 
102, 102);">In the practice contest, you may try as many times as you 
want.</span></div>
      <table><tbody id="dsb-input-form-table2"><tr><td 
class="dsb-input-table-description">Small input<br>10 points</td><td 
class="dsb-input-table-linktd"><div style="display: inline;" 
class="dsb-input-wrapper" id="dsb-input-wrapper2-0"><span 
id="dsb-input-link-plain2-0" class="dsb-input-link-span"><img 
src="year%20of%20more%20code%20jam_files/file.gif" 
class="dsb-input-link-img"><span id="dsb-input-link-plain-text2-0" 
class="dsb-input-link-text">Download C-small.in</span></span><span 
id="dsb-input-more-options-link2-0" class="dsb-input-more-options">More 
options  &nbsp; <span style="font-size: 80%;">▼</span></span></div><span
 style="display: inline;" id="dsb-submission-switch2-0" 
class="dsb-submission-switch">Submit</span><span style="display: none;" 
id="dsb-input-table-caption2-0" class="dsb-input-table-caption"></span><span
 style="display: none;" id="dsb-resubmit-caption2-0" 
class="dsb-input-table-caption">Your submission was received. You can 
still <span class="dsb-input-link-text">resubmit</span> for <span 
id="dsb-resubmit-timer2-0"></span> minutes.<br> Only your last 
submission counts.</span><div><div style="display: none;" 
id="dsb-submit-form-div2-0" class="dsb-submit-form-div"><div 
style="display: none;"><b>Time Remaining:</b> <span id="io_timer_4"></span>&nbsp;&nbsp;</div><div
 style="display: none;"><b>Input:</b> C-small-practice.in.</div><form 
id="submit-formio_timer_4" action="/codejam/contest/dashboard/do" 
enctype="multipart/form-data" method="post"><input 
name="csrfmiddlewaretoken" 
value="MzgwYjQ2MjA4NGIwMDFhMjBjMzQ5ZGI1ODg1MDAyZTh8fFN1Ym1pdEFuc3dlcnwxMjcxNjU0MjI2NjkyODcw"
 type="hidden"><div class="dsb-submit-form-separator">your output file:<input
 id="output-fileio_timer_4" name="answer" class="submitFormFile" 
type="file"></div><div style="display: none;"><table 
class="dsb-source-code-table"><tbody><tr><td style="padding: 0.4em 0.2em
 0pt 0pt;">source file(s):&nbsp;&nbsp;</td><td><div 
id="source-filesio_timer_4"><div id="input-file-divio_timer_4-0"><span 
id="source-fileio_timer_4-0"><input class="submitFormFile" 
name="source-file0" type="file"></span><span style="visibility: hidden;"
 class="dsb-submit-form-links" id="remove-source-fileio_timer_4-0">remove</span></div></div><span
 id="add-source-fileio_timer_4" class="dsb-submit-form-links">Add 
another file</span></td></tr></tbody></table></div><div 
class="dsb-submit-form-separator" style="color: gray;">source file(s): 
&nbsp;&nbsp;&nbsp;not needed for the practice contest</div><div 
class="dsb-submit-form-separator" style="text-align: center;"><input 
id="submit-buttonio_timer_4" value="Submit file" type="button">&nbsp;&nbsp;<input
 id="dsb-hide-submissionio_timer_4" value="Hide" type="button"></div><div
 id="source-file-namesio_timer_4"></div><input name="cmd" 
value="SubmitAnswer" type="hidden"><input name="contest" value="311101" 
type="hidden"><input name="problem" value="319101" type="hidden"><input 
name="input_id" value="0" type="hidden"><input name="num_source_files" 
id="num-source-filesio_timer_4" value="1" type="hidden"></form></div></div></td></tr><tr><td
 class="dsb-input-table-description">Large input<br>20 points</td><td 
class="dsb-input-table-linktd"><div style="display: inline;" 
class="dsb-input-wrapper" id="dsb-input-wrapper2-1"><span 
id="dsb-input-link-plain2-1" class="dsb-input-link-span"><img 
src="year%20of%20more%20code%20jam_files/file.gif" 
class="dsb-input-link-img"><span id="dsb-input-link-plain-text2-1" 
class="dsb-input-link-text">Download C-large.in</span></span><span 
id="dsb-input-more-options-link2-1" class="dsb-input-more-options">More 
options  &nbsp; <span style="font-size: 80%;">▼</span></span></div><span
 style="display: inline;" id="dsb-submission-switch2-1" 
class="dsb-submission-switch">Submit</span><span style="display: none;" 
id="dsb-input-table-caption2-1" class="dsb-input-table-caption"></span><span
 style="display: none;" id="dsb-resubmit-caption2-1" 
class="dsb-input-table-caption">Your submission was received. You can 
still <span class="dsb-input-link-text">resubmit</span> for <span 
id="dsb-resubmit-timer2-1"></span> minutes.<br> Only your last 
submission counts.</span><div><div style="display: none;" 
id="dsb-submit-form-div2-1" class="dsb-submit-form-div"><div 
style="display: none;"><b>Time Remaining:</b> <span id="io_timer_5"></span>&nbsp;&nbsp;</div><div
 style="display: none;">You may resubmit this multiple times within the 
remaining<br>time-frame. Only your last submission will count.</div><form
 id="submit-formio_timer_5" action="/codejam/contest/dashboard/do" 
enctype="multipart/form-data" method="post"><input 
name="csrfmiddlewaretoken" 
value="MzgwYjQ2MjA4NGIwMDFhMjBjMzQ5ZGI1ODg1MDAyZTh8fFN1Ym1pdEFuc3dlcnwxMjcxNjU0MjI2NjkyODcw"
 type="hidden"><div class="dsb-submit-form-separator">your output file:<input
 id="output-fileio_timer_5" name="answer" class="submitFormFile" 
type="file"></div><div style="display: none;"><table 
class="dsb-source-code-table"><tbody><tr><td style="padding: 0.4em 0.2em
 0pt 0pt;">source file(s):&nbsp;&nbsp;</td><td><div 
id="source-filesio_timer_5"><div id="input-file-divio_timer_5-0"><span 
id="source-fileio_timer_5-0"><input class="submitFormFile" 
name="source-file0" type="file"></span><span style="visibility: hidden;"
 class="dsb-submit-form-links" id="remove-source-fileio_timer_5-0">remove</span></div></div><span
 id="add-source-fileio_timer_5" class="dsb-submit-form-links">Add 
another file</span></td></tr></tbody></table></div><div 
class="dsb-submit-form-separator" style="color: gray;">source file(s): 
&nbsp;&nbsp;&nbsp;not needed for the practice contest</div><div 
class="dsb-submit-form-separator" style="text-align: center;"><input 
id="submit-buttonio_timer_5" value="Submit file" type="button">&nbsp;&nbsp;<input
 id="dsb-hide-submissionio_timer_5" value="Hide" type="button"></div><div
 id="source-file-namesio_timer_5"></div><input name="cmd" 
value="SubmitAnswer" type="hidden"><input name="contest" value="311101" 
type="hidden"><input name="problem" value="319101" type="hidden"><input 
name="input_id" value="1" type="hidden"><input name="num_source_files" 
id="num-source-filesio_timer_5" value="1" type="hidden"></form></div></div></td></tr></tbody></table>
      <!-- Problem Statement -->
      <div id="dsb-problem-content-div2" class="dsb-problem-content-div"><p
 class="problem-item">Problem</p>

<p>A rectangular grid with lower case English letters in each cell is 
called <i>doubly sorted</i> if in each row the letters are 
non-decreasing from the left to the right, and in each column the 
letters are non-decreasing from the top to the bottom. In the following 
examples, the first two grids are doubly sorted, while the other two are
 not:
</p><pre>abc    ace    aceg    base
def    ade    cdef    base
ghi    bdg    xxyy    base
</pre>

<p>You are given a partially-filled grid, where some of the cells are 
filled with letters. Your task is to compute the number of ways you can 
fill the rest of the cells so that the resulting grid is doubly sorted. 
The answer might be a big number; you need to output the number of ways 
modulo 10007.</p>

<p class="problem-item">Input</p>

<p>The first line of input gives the number of test cases, <b>T</b>.  <b>T</b>
 test cases follow. Each test case starts with a line containing two 
integers <b>R</b> and <b>C</b>, the number of rows and the number of 
columns respectively. This is followed by <b>R</b> lines, each 
containing a string of length <b>C</b>, giving the partially-filled 
grid. Each character in the grid is either a lower-case English letter, 
or '.', indicating that the cell is not filled yet.
</p>

<p class="problem-item">Output</p>

<p>For each test case, output one line. That line should contain "Case 
#X: y", where <b>X</b> is the case number starting with 1, and <b>y</b> 
is the number of possible doubly-sorted grids, modulo 10007.</p>

<p class="problem-item">Limits</p>
<p>
1 ≤ <b>T</b> ≤ 40<br>
Each character in the partially-filled grid is either '.' or a 
lower-case English letter.
</p>

<p class="problem-item">Small dataset</p>
<p>
1 ≤ <b>R</b>, <b>C</b> ≤ 4<br>
</p>

<p class="problem-item">Large dataset</p>
<p>
1 ≤ <b>R</b>, <b>C</b> ≤ 10<br>
</p>

<p class="problem-item">Sample</p>
<div class="problem-io-wrapper">
<table><tbody><tr><td><br>
<span class="problem-item-gray">Input</span>
<br>&nbsp;</td><td><br>
<span class="problem-item-gray">Output</span>
<br>&nbsp;</td></tr><tr><td><code>
3<br>
2 2<br>
ad<br>
c.<br>
3 3<br>
.a.<br>
a.z<br>
.z.<br>
4 4<br>
....<br>
.g..<br>
.cj.<br>
....<br>
<br></code></td><td><code>
Case #1: 23<br>
Case #2: 7569<br>
Case #3: 0<br>
<br></code></td></tr></tbody></table></div>
</div>
    </div>
    
    <div id="dsb-problem-page3" class="dsb-content-pages">
      <!-- Problem Input File Selection -->
      <div class="dsb-input-panel-text"><span style="color: rgb(102, 
102, 102);">In the practice contest, you may try as many times as you 
want.</span></div>
      <table><tbody id="dsb-input-form-table3"><tr><td 
class="dsb-input-table-description">Small input<br>3 points</td><td 
class="dsb-input-table-linktd"><div style="display: inline;" 
class="dsb-input-wrapper" id="dsb-input-wrapper3-0"><span 
id="dsb-input-link-plain3-0" class="dsb-input-link-span"><img 
src="year%20of%20more%20code%20jam_files/file.gif" 
class="dsb-input-link-img"><span id="dsb-input-link-plain-text3-0" 
class="dsb-input-link-text">Download D-small.in</span></span><span 
id="dsb-input-more-options-link3-0" class="dsb-input-more-options">More 
options  &nbsp; <span style="font-size: 80%;">▼</span></span></div><span
 style="display: inline;" id="dsb-submission-switch3-0" 
class="dsb-submission-switch">Submit</span><span style="display: none;" 
id="dsb-input-table-caption3-0" class="dsb-input-table-caption"></span><span
 style="display: none;" id="dsb-resubmit-caption3-0" 
class="dsb-input-table-caption">Your submission was received. You can 
still <span class="dsb-input-link-text">resubmit</span> for <span 
id="dsb-resubmit-timer3-0"></span> minutes.<br> Only your last 
submission counts.</span><div><div style="display: none;" 
id="dsb-submit-form-div3-0" class="dsb-submit-form-div"><div 
style="display: none;"><b>Time Remaining:</b> <span id="io_timer_6"></span>&nbsp;&nbsp;</div><div
 style="display: none;"><b>Input:</b> D-small-practice.in.</div><form 
id="submit-formio_timer_6" action="/codejam/contest/dashboard/do" 
enctype="multipart/form-data" method="post"><input 
name="csrfmiddlewaretoken" 
value="MzgwYjQ2MjA4NGIwMDFhMjBjMzQ5ZGI1ODg1MDAyZTh8fFN1Ym1pdEFuc3dlcnwxMjcxNjU0MjI2NjkyODcw"
 type="hidden"><div class="dsb-submit-form-separator">your output file:<input
 id="output-fileio_timer_6" name="answer" class="submitFormFile" 
type="file"></div><div style="display: none;"><table 
class="dsb-source-code-table"><tbody><tr><td style="padding: 0.4em 0.2em
 0pt 0pt;">source file(s):&nbsp;&nbsp;</td><td><div 
id="source-filesio_timer_6"><div id="input-file-divio_timer_6-0"><span 
id="source-fileio_timer_6-0"><input class="submitFormFile" 
name="source-file0" type="file"></span><span style="visibility: hidden;"
 class="dsb-submit-form-links" id="remove-source-fileio_timer_6-0">remove</span></div></div><span
 id="add-source-fileio_timer_6" class="dsb-submit-form-links">Add 
another file</span></td></tr></tbody></table></div><div 
class="dsb-submit-form-separator" style="color: gray;">source file(s): 
&nbsp;&nbsp;&nbsp;not needed for the practice contest</div><div 
class="dsb-submit-form-separator" style="text-align: center;"><input 
id="submit-buttonio_timer_6" value="Submit file" type="button">&nbsp;&nbsp;<input
 id="dsb-hide-submissionio_timer_6" value="Hide" type="button"></div><div
 id="source-file-namesio_timer_6"></div><input name="cmd" 
value="SubmitAnswer" type="hidden"><input name="contest" value="311101" 
type="hidden"><input name="problem" value="322101" type="hidden"><input 
name="input_id" value="0" type="hidden"><input name="num_source_files" 
id="num-source-filesio_timer_6" value="1" type="hidden"></form></div></div></td></tr><tr><td
 class="dsb-input-table-description">Large input<br>25 points</td><td 
class="dsb-input-table-linktd"><div style="display: inline;" 
class="dsb-input-wrapper" id="dsb-input-wrapper3-1"><span 
id="dsb-input-link-plain3-1" class="dsb-input-link-span"><img 
src="year%20of%20more%20code%20jam_files/file.gif" 
class="dsb-input-link-img"><span id="dsb-input-link-plain-text3-1" 
class="dsb-input-link-text">Download D-large.in</span></span><span 
id="dsb-input-more-options-link3-1" class="dsb-input-more-options">More 
options  &nbsp; <span style="font-size: 80%;">▼</span></span></div><span
 style="display: inline;" id="dsb-submission-switch3-1" 
class="dsb-submission-switch">Submit</span><span style="display: none;" 
id="dsb-input-table-caption3-1" class="dsb-input-table-caption"></span><span
 style="display: none;" id="dsb-resubmit-caption3-1" 
class="dsb-input-table-caption">Your submission was received. You can 
still <span class="dsb-input-link-text">resubmit</span> for <span 
id="dsb-resubmit-timer3-1"></span> minutes.<br> Only your last 
submission counts.</span><div><div style="display: none;" 
id="dsb-submit-form-div3-1" class="dsb-submit-form-div"><div 
style="display: none;"><b>Time Remaining:</b> <span id="io_timer_7"></span>&nbsp;&nbsp;</div><div
 style="display: none;">You may resubmit this multiple times within the 
remaining<br>time-frame. Only your last submission will count.</div><form
 id="submit-formio_timer_7" action="/codejam/contest/dashboard/do" 
enctype="multipart/form-data" method="post"><input 
name="csrfmiddlewaretoken" 
value="MzgwYjQ2MjA4NGIwMDFhMjBjMzQ5ZGI1ODg1MDAyZTh8fFN1Ym1pdEFuc3dlcnwxMjcxNjU0MjI2NjkyODcw"
 type="hidden"><div class="dsb-submit-form-separator">your output file:<input
 id="output-fileio_timer_7" name="answer" class="submitFormFile" 
type="file"></div><div style="display: none;"><table 
class="dsb-source-code-table"><tbody><tr><td style="padding: 0.4em 0.2em
 0pt 0pt;">source file(s):&nbsp;&nbsp;</td><td><div 
id="source-filesio_timer_7"><div id="input-file-divio_timer_7-0"><span 
id="source-fileio_timer_7-0"><input class="submitFormFile" 
name="source-file0" type="file"></span><span style="visibility: hidden;"
 class="dsb-submit-form-links" id="remove-source-fileio_timer_7-0">remove</span></div></div><span
 id="add-source-fileio_timer_7" class="dsb-submit-form-links">Add 
another file</span></td></tr></tbody></table></div><div 
class="dsb-submit-form-separator" style="color: gray;">source file(s): 
&nbsp;&nbsp;&nbsp;not needed for the practice contest</div><div 
class="dsb-submit-form-separator" style="text-align: center;"><input 
id="submit-buttonio_timer_7" value="Submit file" type="button">&nbsp;&nbsp;<input
 id="dsb-hide-submissionio_timer_7" value="Hide" type="button"></div><div
 id="source-file-namesio_timer_7"></div><input name="cmd" 
value="SubmitAnswer" type="hidden"><input name="contest" value="311101" 
type="hidden"><input name="problem" value="322101" type="hidden"><input 
name="input_id" value="1" type="hidden"><input name="num_source_files" 
id="num-source-filesio_timer_7" value="1" type="hidden"></form></div></div></td></tr></tbody></table>
      <!-- Problem Statement -->
      <div id="dsb-problem-content-div3" class="dsb-problem-content-div"><p
 class="problem-item">Problem</p>
<p>
You are given a network of wireless towers.
Each tower has a range and can send data to neighboring towers
as long as the distance is less than or equal to the sending tower's 
range.
</p>

<p>
The towers are using an old communication protocol A,
but there is a new, better protocol B available. We are thinking about
upgrading some towers to send data using protocol B to achieve better 
bandwidth.
</p>

<p>
There is one important restriction: if a tower T is using the new 
protocol B,
every tower within T's range must also be running protocol B, so that 
they can understand the data sent from T. The reverse is not necessary —
 towers
running the new protocol B can be sent data from towers using the old 
protocol A.
</p>

<p>Your task is to select the best set of towers to upgrade from 
protocol A to protocol B.  There is some benefit to upgrading a tower, 
but there are also installation costs. So each tower will have a score, 
which can be positive or negative, which is the value of upgrading the 
tower.  Choose the set of towers to upgrade in such a way that the total
 score of the upgraded towers is maximized.
</p>

<p class="problem-item">Input</p>

The first line contains the number of test cases, <b>T</b>.
Each test case starts with the number of towers, <b>n</b>. The following
<b>n</b> lines each contain 4 integers:
<b>x</b>, <b>y</b>, <b>r</b>, <b>s</b>.  They describe a tower at 
coordinates
<b>x</b>, <b>y</b> having a range of <b>r</b> and a score (value of
updating to the new protocol) of <b>s</b>

<p class="problem-item">Output</p>

For each test case, output:
<pre>Case #X: score</pre>
where <b>X</b> is the test case number, starting from 1, and <b>score</b>
 is the
total score for the best choice of towers.

<p class="problem-item">Limits</p>
<p>
1 ≤ <b>T</b> ≤ 55<br>
-10 000 ≤ <b>x</b>, <b>y</b> ≤ 10 000<br>
1 ≤ <b>r</b> ≤ 20 000<br>
-1000 ≤ <b>s</b> ≤ 1000<br>
<br>
No two towers will have the same coordinates.
</p>

<p class="problem-item">Small dataset</p>
<p>
1 ≤ <b>n</b> ≤ 15
</p>
<p class="problem-item">Large dataset</p>
<p>
1 ≤ <b>n</b> ≤ 500
</p>

<p class="problem-item">Sample</p>
<div class="problem-io-wrapper">
<table>
<tbody><tr>
<td>
<br>
<span class="problem-item-gray">Input</span>
<br>&nbsp;
</td>
<td>
<br>
<span class="problem-item-gray">Output</span>
<br>&nbsp;
</td>
</tr>
<tr>
<td>
<code>
1<br>
5<br>
0 1 7 10<br>
0 -1 7 10<br>
5 0 1 -15<br>
10 0 6 10<br>
15 1 2 -20<br>
</code>
</td>
<td>
<code>
Case #1: 5<br>
<br>
</code>
</td></tr></tbody></table>
</div></div>
    </div>
    
    <div id="dsb-problem-page4" class="dsb-content-pages">
      <!-- Problem Input File Selection -->
      <div class="dsb-input-panel-text"><span style="color: rgb(102, 
102, 102);">In the practice contest, you may try as many times as you 
want.</span></div>
      <table><tbody id="dsb-input-form-table4"><tr><td 
class="dsb-input-table-description">Small input<br>7 points</td><td 
class="dsb-input-table-linktd"><div style="display: inline;" 
class="dsb-input-wrapper" id="dsb-input-wrapper4-0"><span 
id="dsb-input-link-plain4-0" class="dsb-input-link-span"><img 
src="year%20of%20more%20code%20jam_files/file.gif" 
class="dsb-input-link-img"><span id="dsb-input-link-plain-text4-0" 
class="dsb-input-link-text">Download E-small.in</span></span><span 
id="dsb-input-more-options-link4-0" class="dsb-input-more-options">More 
options  &nbsp; <span style="font-size: 80%;">▼</span></span></div><span
 style="display: inline;" id="dsb-submission-switch4-0" 
class="dsb-submission-switch">Submit</span><span style="display: none;" 
id="dsb-input-table-caption4-0" class="dsb-input-table-caption"></span><span
 style="display: none;" id="dsb-resubmit-caption4-0" 
class="dsb-input-table-caption">Your submission was received. You can 
still <span class="dsb-input-link-text">resubmit</span> for <span 
id="dsb-resubmit-timer4-0"></span> minutes.<br> Only your last 
submission counts.</span><div><div style="display: none;" 
id="dsb-submit-form-div4-0" class="dsb-submit-form-div"><div 
style="display: none;"><b>Time Remaining:</b> <span id="io_timer_8"></span>&nbsp;&nbsp;</div><div
 style="display: none;"><b>Input:</b> E-small-practice.in.</div><form 
id="submit-formio_timer_8" action="/codejam/contest/dashboard/do" 
enctype="multipart/form-data" method="post"><input 
name="csrfmiddlewaretoken" 
value="MzgwYjQ2MjA4NGIwMDFhMjBjMzQ5ZGI1ODg1MDAyZTh8fFN1Ym1pdEFuc3dlcnwxMjcxNjU0MjI2NjkyODcw"
 type="hidden"><div class="dsb-submit-form-separator">your output file:<input
 id="output-fileio_timer_8" name="answer" class="submitFormFile" 
type="file"></div><div style="display: none;"><table 
class="dsb-source-code-table"><tbody><tr><td style="padding: 0.4em 0.2em
 0pt 0pt;">source file(s):&nbsp;&nbsp;</td><td><div 
id="source-filesio_timer_8"><div id="input-file-divio_timer_8-0"><span 
id="source-fileio_timer_8-0"><input class="submitFormFile" 
name="source-file0" type="file"></span><span style="visibility: hidden;"
 class="dsb-submit-form-links" id="remove-source-fileio_timer_8-0">remove</span></div></div><span
 id="add-source-fileio_timer_8" class="dsb-submit-form-links">Add 
another file</span></td></tr></tbody></table></div><div 
class="dsb-submit-form-separator" style="color: gray;">source file(s): 
&nbsp;&nbsp;&nbsp;not needed for the practice contest</div><div 
class="dsb-submit-form-separator" style="text-align: center;"><input 
id="submit-buttonio_timer_8" value="Submit file" type="button">&nbsp;&nbsp;<input
 id="dsb-hide-submissionio_timer_8" value="Hide" type="button"></div><div
 id="source-file-namesio_timer_8"></div><input name="cmd" 
value="SubmitAnswer" type="hidden"><input name="contest" value="311101" 
type="hidden"><input name="problem" value="339102" type="hidden"><input 
name="input_id" value="0" type="hidden"><input name="num_source_files" 
id="num-source-filesio_timer_8" value="1" type="hidden"></form></div></div></td></tr><tr><td
 class="dsb-input-table-description">Large input<br>32 points</td><td 
class="dsb-input-table-linktd"><div style="display: inline;" 
class="dsb-input-wrapper" id="dsb-input-wrapper4-1"><span 
id="dsb-input-link-plain4-1" class="dsb-input-link-span"><img 
src="year%20of%20more%20code%20jam_files/file.gif" 
class="dsb-input-link-img"><span id="dsb-input-link-plain-text4-1" 
class="dsb-input-link-text">Download E-large.in</span></span><span 
id="dsb-input-more-options-link4-1" class="dsb-input-more-options">More 
options  &nbsp; <span style="font-size: 80%;">▼</span></span></div><span
 style="display: inline;" id="dsb-submission-switch4-1" 
class="dsb-submission-switch">Submit</span><span style="display: none;" 
id="dsb-input-table-caption4-1" class="dsb-input-table-caption"></span><span
 style="display: none;" id="dsb-resubmit-caption4-1" 
class="dsb-input-table-caption">Your submission was received. You can 
still <span class="dsb-input-link-text">resubmit</span> for <span 
id="dsb-resubmit-timer4-1"></span> minutes.<br> Only your last 
submission counts.</span><div><div style="display: none;" 
id="dsb-submit-form-div4-1" class="dsb-submit-form-div"><div 
style="display: none;"><b>Time Remaining:</b> <span id="io_timer_9"></span>&nbsp;&nbsp;</div><div
 style="display: none;">You may resubmit this multiple times within the 
remaining<br>time-frame. Only your last submission will count.</div><form
 id="submit-formio_timer_9" action="/codejam/contest/dashboard/do" 
enctype="multipart/form-data" method="post"><input 
name="csrfmiddlewaretoken" 
value="MzgwYjQ2MjA4NGIwMDFhMjBjMzQ5ZGI1ODg1MDAyZTh8fFN1Ym1pdEFuc3dlcnwxMjcxNjU0MjI2NjkyODcw"
 type="hidden"><div class="dsb-submit-form-separator">your output file:<input
 id="output-fileio_timer_9" name="answer" class="submitFormFile" 
type="file"></div><div style="display: none;"><table 
class="dsb-source-code-table"><tbody><tr><td style="padding: 0.4em 0.2em
 0pt 0pt;">source file(s):&nbsp;&nbsp;</td><td><div 
id="source-filesio_timer_9"><div id="input-file-divio_timer_9-0"><span 
id="source-fileio_timer_9-0"><input class="submitFormFile" 
name="source-file0" type="file"></span><span style="visibility: hidden;"
 class="dsb-submit-form-links" id="remove-source-fileio_timer_9-0">remove</span></div></div><span
 id="add-source-fileio_timer_9" class="dsb-submit-form-links">Add 
another file</span></td></tr></tbody></table></div><div 
class="dsb-submit-form-separator" style="color: gray;">source file(s): 
&nbsp;&nbsp;&nbsp;not needed for the practice contest</div><div 
class="dsb-submit-form-separator" style="text-align: center;"><input 
id="submit-buttonio_timer_9" value="Submit file" type="button">&nbsp;&nbsp;<input
 id="dsb-hide-submissionio_timer_9" value="Hide" type="button"></div><div
 id="source-file-namesio_timer_9"></div><input name="cmd" 
value="SubmitAnswer" type="hidden"><input name="contest" value="311101" 
type="hidden"><input name="problem" value="339102" type="hidden"><input 
name="input_id" value="1" type="hidden"><input name="num_source_files" 
id="num-source-filesio_timer_9" value="1" type="hidden"></form></div></div></td></tr></tbody></table>
      <!-- Problem Statement -->
      <div id="dsb-problem-content-div4" class="dsb-problem-content-div"><p
 class="problem-item">Problem</p>


<p>You have 2<b>n</b> marbles on a square grid.  The marbles are colored
 in <b>n</b> different colors such that there are exactly 2 marbles of 
each color.  The marbles are placed at the coordinates (1,0), (2,0), 
..., (2<b>n</b>, 0).</p>

<p>Your task is to draw a path for each color that joins the two marbles
 of that color. Each path should be composed of vertical or horizontal 
line segments between grid points.  No two paths can intersect or touch 
each other.  No path may cross the y=0 line.  Each path can only touch 
the y=0 line at the position of the two marbles it is connecting, so the
 first and last line segment of each path must be vertical.</p>

<p>Given an arrangement of marbles, return the minimum height of a 
solution, or return -1 if no solution exists. The height is defined as 
the difference between the highest and lowest Y-coordinates of the paths
 used.</p>

<p>An example:
</p><pre>red red blue yellow blue yellow
</pre>
One solution would be:
<pre> +---+    +-----------+
 |   |    |           |
red red blue yellow blue yellow
                 |           |
                 +-----------+
</pre>
The minimum height is 2 in this case.

<p class="problem-item">Input</p>
<p>The first line of input gives the number of cases, <b>T</b>.
<b>T</b> test cases follow. The first line of each case contains <b>n</b>,
 the number of different colors for the marbles. The next line contains a
 string of 2<b>n</b> words separated by spaces which correspond to the 
colors of the marbles, in order from left to right. Each color is a 
string of lower case letters ('a' .. 'z') no longer than 10 characters. 
There will be exactly <b>n</b> different colors and each color will 
appear exactly twice.</p>

<p class="problem-item">Output</p>
<p>For each test case, output one line containing "Case #<b>x</b>: ", 
where <b>x</b> is the case number (starting from 1), followed by the 
height of any optimal solution, or -1 if no solution exists. </p>

<p class="problem-item">Limits</p>
<p>
1 &lt;= <b>T</b> &lt;= 50.
</p>
<p class="problem-item">Small dataset</p>
<p>
1 &lt;= <b>n</b> &lt;= 20.<br>

</p>
<p class="problem-item">Large dataset</p>
<p>
1 &lt;= <b>n</b> &lt;= 500.<br>
</p>

<p class="problem-item">Sample</p>
<div class="problem-io-wrapper">
<table>
<tbody><tr>
<td>
<br>
<span class="problem-item-gray">Input</span>
<br>&nbsp;
</td>
<td>
<br>
<span class="problem-item-gray">Output</span>
<br>&nbsp;
</td>
</tr>
<tr>
<td>
<code>
4<br>
3<br>
red red blue yellow blue yellow<br>
3<br>
red blue yellow red blue yellow<br>
3<br>
red blue yellow blue yellow red<br>
3<br>
red red blue blue yellow yellow<br>
<br>
</code>
</td>
<td>
<code>
Case #1: 2<br>
Case #2: -1<br>
Case #3: 3<br>
Case #4: 1<br>
</code>
</td></tr></tbody></table>
</div>
</div>
    </div>
    
    <div id="dsb-problem-page5" class="dsb-content-pages">
      <!-- Problem Input File Selection -->
      <div class="dsb-input-panel-text"><span style="color: rgb(102, 
102, 102);">In the practice contest, you may try as many times as you 
want.</span></div>
      <table><tbody id="dsb-input-form-table5"><tr><td 
class="dsb-input-table-description">Small input<br>21 points</td><td 
class="dsb-input-table-linktd"><div style="display: inline;" 
class="dsb-input-wrapper" id="dsb-input-wrapper5-0"><span 
id="dsb-input-link-plain5-0" class="dsb-input-link-span"><img 
src="year%20of%20more%20code%20jam_files/file.gif" 
class="dsb-input-link-img"><span id="dsb-input-link-plain-text5-0" 
class="dsb-input-link-text">Download F-small.in</span></span><span 
id="dsb-input-more-options-link5-0" class="dsb-input-more-options">More 
options  &nbsp; <span style="font-size: 80%;">▼</span></span></div><span
 style="display: inline;" id="dsb-submission-switch5-0" 
class="dsb-submission-switch">Submit</span><span style="display: none;" 
id="dsb-input-table-caption5-0" class="dsb-input-table-caption"></span><span
 style="display: none;" id="dsb-resubmit-caption5-0" 
class="dsb-input-table-caption">Your submission was received. You can 
still <span class="dsb-input-link-text">resubmit</span> for <span 
id="dsb-resubmit-timer5-0"></span> minutes.<br> Only your last 
submission counts.</span><div><div style="display: none;" 
id="dsb-submit-form-div5-0" class="dsb-submit-form-div"><div 
style="display: none;"><b>Time Remaining:</b> <span id="io_timer_10"></span>&nbsp;&nbsp;</div><div
 style="display: none;"><b>Input:</b> F-small-practice.in.</div><form 
id="submit-formio_timer_10" action="/codejam/contest/dashboard/do" 
enctype="multipart/form-data" method="post"><input 
name="csrfmiddlewaretoken" 
value="MzgwYjQ2MjA4NGIwMDFhMjBjMzQ5ZGI1ODg1MDAyZTh8fFN1Ym1pdEFuc3dlcnwxMjcxNjU0MjI2NjkyODcw"
 type="hidden"><div class="dsb-submit-form-separator">your output file:<input
 id="output-fileio_timer_10" name="answer" class="submitFormFile" 
type="file"></div><div style="display: none;"><table 
class="dsb-source-code-table"><tbody><tr><td style="padding: 0.4em 0.2em
 0pt 0pt;">source file(s):&nbsp;&nbsp;</td><td><div 
id="source-filesio_timer_10"><div id="input-file-divio_timer_10-0"><span
 id="source-fileio_timer_10-0"><input class="submitFormFile" 
name="source-file0" type="file"></span><span style="visibility: hidden;"
 class="dsb-submit-form-links" id="remove-source-fileio_timer_10-0">remove</span></div></div><span
 id="add-source-fileio_timer_10" class="dsb-submit-form-links">Add 
another file</span></td></tr></tbody></table></div><div 
class="dsb-submit-form-separator" style="color: gray;">source file(s): 
&nbsp;&nbsp;&nbsp;not needed for the practice contest</div><div 
class="dsb-submit-form-separator" style="text-align: center;"><input 
id="submit-buttonio_timer_10" value="Submit file" type="button">&nbsp;&nbsp;<input
 id="dsb-hide-submissionio_timer_10" value="Hide" type="button"></div><div
 id="source-file-namesio_timer_10"></div><input name="cmd" 
value="SubmitAnswer" type="hidden"><input name="contest" value="311101" 
type="hidden"><input name="problem" value="341101" type="hidden"><input 
name="input_id" value="0" type="hidden"><input name="num_source_files" 
id="num-source-filesio_timer_10" value="1" type="hidden"></form></div></div></td></tr><tr><td
 class="dsb-input-table-description">Large input<br>45 points</td><td 
class="dsb-input-table-linktd"><div style="display: inline;" 
class="dsb-input-wrapper" id="dsb-input-wrapper5-1"><span 
id="dsb-input-link-plain5-1" class="dsb-input-link-span"><img 
src="year%20of%20more%20code%20jam_files/file.gif" 
class="dsb-input-link-img"><span id="dsb-input-link-plain-text5-1" 
class="dsb-input-link-text">Download F-large.in</span></span><span 
id="dsb-input-more-options-link5-1" class="dsb-input-more-options">More 
options  &nbsp; <span style="font-size: 80%;">▼</span></span></div><span
 style="display: inline;" id="dsb-submission-switch5-1" 
class="dsb-submission-switch">Submit</span><span style="display: none;" 
id="dsb-input-table-caption5-1" class="dsb-input-table-caption"></span><span
 style="display: none;" id="dsb-resubmit-caption5-1" 
class="dsb-input-table-caption">Your submission was received. You can 
still <span class="dsb-input-link-text">resubmit</span> for <span 
id="dsb-resubmit-timer5-1"></span> minutes.<br> Only your last 
submission counts.</span><div><div style="display: none;" 
id="dsb-submit-form-div5-1" class="dsb-submit-form-div"><div 
style="display: none;"><b>Time Remaining:</b> <span id="io_timer_11"></span>&nbsp;&nbsp;</div><div
 style="display: none;">You may resubmit this multiple times within the 
remaining<br>time-frame. Only your last submission will count.</div><form
 id="submit-formio_timer_11" action="/codejam/contest/dashboard/do" 
enctype="multipart/form-data" method="post"><input 
name="csrfmiddlewaretoken" 
value="MzgwYjQ2MjA4NGIwMDFhMjBjMzQ5ZGI1ODg1MDAyZTh8fFN1Ym1pdEFuc3dlcnwxMjcxNjU0MjI2NjkyODcw"
 type="hidden"><div class="dsb-submit-form-separator">your output file:<input
 id="output-fileio_timer_11" name="answer" class="submitFormFile" 
type="file"></div><div style="display: none;"><table 
class="dsb-source-code-table"><tbody><tr><td style="padding: 0.4em 0.2em
 0pt 0pt;">source file(s):&nbsp;&nbsp;</td><td><div 
id="source-filesio_timer_11"><div id="input-file-divio_timer_11-0"><span
 id="source-fileio_timer_11-0"><input class="submitFormFile" 
name="source-file0" type="file"></span><span style="visibility: hidden;"
 class="dsb-submit-form-links" id="remove-source-fileio_timer_11-0">remove</span></div></div><span
 id="add-source-fileio_timer_11" class="dsb-submit-form-links">Add 
another file</span></td></tr></tbody></table></div><div 
class="dsb-submit-form-separator" style="color: gray;">source file(s): 
&nbsp;&nbsp;&nbsp;not needed for the practice contest</div><div 
class="dsb-submit-form-separator" style="text-align: center;"><input 
id="submit-buttonio_timer_11" value="Submit file" type="button">&nbsp;&nbsp;<input
 id="dsb-hide-submissionio_timer_11" value="Hide" type="button"></div><div
 id="source-file-namesio_timer_11"></div><input name="cmd" 
value="SubmitAnswer" type="hidden"><input name="contest" value="311101" 
type="hidden"><input name="problem" value="341101" type="hidden"><input 
name="input_id" value="1" type="hidden"><input name="num_source_files" 
id="num-source-filesio_timer_11" value="1" type="hidden"></form></div></div></td></tr></tbody></table>
      <!-- Problem Statement -->
      <div id="dsb-problem-content-div5" class="dsb-problem-content-div"><p
 class="problem-item">Problem</p>
<p>
In a big, square room there are two point light sources: one is red and
the other is green. There are also <b>n</b> circular pillars.
</p>

<p>Light travels in straight lines and is absorbed by walls and pillars.
 The pillars therefore cast shadows: they do not let light through. 
There are places in the room where no light reaches (black), where only
one of the two light sources reaches (red or green), and places where
both lights reach (yellow). Compute the total area of each of the four
colors in the room. Do not include the area of the pillars.

</p><p class="problem-item">Input</p>

<p>
</p><ul>
  <li> One line containing the number of test cases, <b>T</b>.</li>
</ul>
Each test case contains, in order:
<ul>
  <li>One line containing the coordinates <b>x</b>, <b>y</b>
  of the red light source.</li>
  <li>One line containing the coordinates <b>x</b>, <b>y</b>
  of the green light source.</li>
  <li>One line containing the number of pillars <b>n</b>.</li>
  <li><b>n</b> lines describing the pillars. Each contains 3 numbers
<b>x</b>, <b>y</b>, <b>r</b>. The pillar is a disk with the center
(<b>x</b>, <b>y</b>) and radius <b>r</b>.</li>
</ul>
The room is the square described by 0 ≤ <b>x</b>, <b>y</b> ≤ 100.
Pillars, room walls and light sources are all disjoint, they do not 
overlap or touch.


<p class="problem-item">Output</p>

<p>
For each test case, output:
</p><pre>Case #X:
black area
red area
green area
yellow area</pre>
where <b>X</b> is the test case number, starting from 1,
and each area is a real number.
<p>
Any answer with absolute or relative error of at most 10<sup>-5</sup>
will be accepted.
</p>

<p class="problem-item">Limits</p>
<p>All input numbers are integers.</p>
<p>
1 ≤ <b>T</b> ≤ 15<br>
0 ≤ <b>x</b>, <b>y</b> ≤ 100<br>
1 ≤ <b>r</b> ≤ 49<br>
</p>

<p class="problem-item">Small dataset</p>
<p>
0 ≤ <b>n</b> ≤ 1<br>
</p>
<p class="problem-item">Large dataset</p>
<p>
0 ≤ <b>n</b> ≤ 50<br>
</p>

<p class="problem-item">Sample</p>
<div class="problem-io-wrapper">
<table>
<tbody><tr>
<td>
<br>
<span class="problem-item-gray">Input</span>
<br>&nbsp;
</td>
<td>
<br>
<span class="problem-item-gray">Output</span>
<br>&nbsp;
</td>
</tr>
<tr>
<td>
<code>1<br>
5 50<br>
95 50<br>
1<br>
50 50 10<br>
</code>
</td>
<td>
<code>Case #1:<br>
0.7656121<br>
1437.986<br>
1437.986<br>
6809.104<br>
</code>
</td></tr></tbody></table>
</div>

</div>
    </div>
    

    <div id="dsb-analysis-page" class="dsb-content-pages">
    
      <div id="dsb-analysis-selections">
        <span id="dsb-analysis-selection-p6" 
class="dsb-analysis-selected">Overview</span>
        
        &nbsp; | &nbsp;
        <span id="dsb-analysis-selection-p0" 
class="dsb-analysis-not-selected">
          Problem A</span>
        
        &nbsp; | &nbsp;
        <span id="dsb-analysis-selection-p1" 
class="dsb-analysis-not-selected">
          Problem B</span>
        
        &nbsp; | &nbsp;
        <span id="dsb-analysis-selection-p2" 
class="dsb-analysis-not-selected">
          Problem C</span>
        
        &nbsp; | &nbsp;
        <span id="dsb-analysis-selection-p3" 
class="dsb-analysis-not-selected">
          Problem D</span>
        
        &nbsp; | &nbsp;
        <span id="dsb-analysis-selection-p4" 
class="dsb-analysis-not-selected">
          Problem E</span>
        
        &nbsp; | &nbsp;
        <span id="dsb-analysis-selection-p5" 
class="dsb-analysis-not-selected">
          Problem F</span>
        
      </div>
      <div id="dsb-problem-analysis-div6" 
class="dsb-problem-content-div"><p>
In this final, onsite round, ACRush got into an early lead and managed 
to hold on to it until the very end, winning by a large margin of 81 
points -- almost double the score of second place finisher, qizichao, 
with wata in close third.
</p>
<p>
The problem set was geometry-heavy, with three of the six problems 
requiring at least some computational geometry. Dynamic programming and 
probability made notable appearances as well.
</p>
<p>
Unusually, the round started with four different people solving four 
different problems (A, B, C and D). Most contestants quickly realized 
that E and F were much more difficult than the first four and left them 
to the end. ACRush ended up being the only one to solve problem F 
correctly. Vitaliy and dzhulgakov were the only two contestants to solve
 problem E and finished in 7th and 5th place respectively.
</p>
<br>
<hr>
<p class="problem-item">Cast</p>
<p>Problem A. <i>Year of More Code Jam</i> Written by Xiaomin Chen. 
Prepared by Ante Derek and Xiaomin Chen.</p>
<p>Problem B. <i>Min Perimeter</i> Written by Cosmin Negruseri. Prepared
 by Petr Mitrichev and Cosmin Negruseri.</p>
<p>Problem C. <i>Doubly-sorted Grid</i> Written by Evgeny Cherepanov. 
Prepared by Xiaomin Chen.</p>
<p>Problem D. <i>Wi-fi Towers</i> Written by Xiaomin Chen. Prepared by 
Xiaomin Chen, Tomek Czajka, and John Dethridge.</p>
<p>Problem E. <i>Marbles</i> Written by Cosmin Negruseri. Prepared Frank
 Chu and Ante Derek.</p>
<p>Problem F. <i>Lights</i> Written and prepared by Tomek Czajka.</p>
<p>Contest analysis presented by Xiaomin Chen, Tomek Czajka, John 
Dethridge, Igor Naverniouk, and Cosmin Negruseri.</p>
<p>Solutions and other problem preparation provided by Marius Andrei, 
Bartholomew Furrow, Derek Kisman, Fabio Moreira, and Igor Naverniouk.</p>
</div>
      
      <div id="dsb-problem-analysis-div0" 
class="dsb-problem-content-div" style="display: none;"><p>
The setting of this problem is no doubt discrete probability. From the 
definition, the space consists of <i>N</i><sup>T</sup> equally likely 
possible outcomes. That can be, under our limits, as huge as 10<sup>450</sup>.
 Clearly, a naive approach is not feasible.
</p>
<p>
But let us do a little exercise in probability. Define the random 
variable <i>X</i><sub>i</sub> to be the number of contests on the i-th 
day, the quantity we want to compute is the average of <i>X</i><sub>i</sub><sup>2</sup>,
 i.e., the expectation Ε(∑ <i>X</i><sub>i</sub><sup>2</sup>). By the 
linearity of the expectation, we have
</p><blockquote>
Ε(∑<sub>1≤i≤N</sub> <i>X</i><sub>i</sub><sup>2</sup>) = ∑<sub>1≤i≤N</sub>
 Ε(<i>X</i><sub>i</sub><sup>2</sup>).
</blockquote>
So let us focus on the computation of the variable for a fixed day for 
the moment. Pick any i, and let <i>X</i> := <i>X</i><sub>i</sub>. Let us
 define more random variables. Define Y<sub>j</sub> to be the <i>indicator</i>
 of whether the j-th tournament will have a contest on the i-th day. 
Clearly, <i>X</i> = ∑<sub>j</sub> Y<sub>j</sub>. So,
<blockquote>
(*) &nbsp;&nbsp;&nbsp; Ε(<i>X</i><sup>2</sup>) = Ε((∑<sub>1≤j≤T</sub> Y<sub>j</sub>)<sup>2</sup>)
 = ∑<sub>1≤j≤T</sub> Ε(Y<sub>j</sub><sup>2</sup>) + 2 ∑<sub>1≤j&lt;k≤T</sub>
 Ε(Y<sub>j</sub>Y<sub>k</sub>).
</blockquote>
We observe that each terms in the last expression is easy to compute. 
Being the indicator random variables, the <i>Y</i>'s take value 0 or 1. 
So 
<ul>
<li>Y<sub>j</sub><sup>2</sup> always has the same value as Y<sub>j</sub>,
 and its expectation is just the probability that Y<sub>j</sub> is 1, 
i.e., tournament j has a contest on day i.</li>
<li>Y<sub>j</sub>Y<sub>k</sub> is 1 if and only if both Y<sub>j</sub> 
and Y<sub>k</sub> are 1. The expectation is the probability that both 
the j-th and the k-th tournament has a contest on day i.</li></ul>
Let the input for the tournament j, i.e., the contest pattern be d<sub>1</sub>=1,
 
d<sub>2</sub>, ..., d<sub>m</sub>. Denote D(i,j) be the number of the 
d's for tournament j that are less than or equal to i. There are <i>N</i>
 choices for the starting date of a particular tournament. It is easy to
 see that the first probability above is D(i,j) / N; while the second 
probability is D(i,j)D(i,k) / N<sup>2</sup>.

<p>
So far we addressed the problem just for a single day i. We need to do 
this for every i. There are 10<sup>9</sup> of them. But notice that, as 
long as there is no input d<sub>t</sub> = i, D(i-1, j) = D(i, j) for all
 j. This means that the expectation for the i-th day is the same as the 
expectation for the (i-1)-th. There are at most <i>T</i> max(<i>M</i>) ≤
 2500 such d's in the input, so we need to compute (*) for at most 2500 
days. For our problem, it is good enough to realize that there is no d 
&gt; 10000. So all the expectations after the 10000-th day are the same.
 We can just do the computation for the first 10000 days, and for the 
rest, a simple multiplication.
</p>
<p>
The last problem is the need for big integers. At the first glance we 
might have both numerators and denominators as big as 10<sup>450</sup>. 
But that is not the truth. Simply observe the above answer, which is a 
sum of various D(i,j) / N and 
D(i,j)D(i,k) / N<sup>2</sup>. We actually proved that the denominator is
 never bigger than <i>N</i><sup>2</sup>. A careful implementation with 
64-bit integers will be good enough.
</p>
<p>
For a further speed-up. The formula in (*) involves computing O(T<sup>2</sup>)
 terms. But if we do it from day 1, keep D(i,j) for each j and two more 
variables -- S<sub>1</sub> for the sum of all the D(i,j)'s, and S<sub>2</sub>
 for the sum of D(i,j)<sup>2</sup>'s, then we just need constant update 
time when we see an input d, and also constant computation time for each
 day we want to compute (*).
</p>
<br><br>
</div>
      
      <div id="dsb-problem-analysis-div1" 
class="dsb-problem-content-div" style="display: none;"><p>This problem 
is similar to the classical problem of finding the closest pair in a set
 of points.  Algorithms that solve the closest-pair problem can be 
adapted to solve this one.</p>

<p>The number of points can be pretty large so we need an efficient 
algorithm. We can solve the problem in <i>O(n log n)</i> time using 
divide and conquer. We will split the set of points by a vertical line 
into two sets of equal size.  There are now three cases for the 
minimum-perimeter triangle: its three points can either be entirely in 
the left set, entirely in the right set, or it can use points from each 
half.</p><p>
We find the minimum perimeters for the left and right sets using 
recursion.  Let the smallest of those perimeters be <i>p</i>. We can use
 <i>p</i> to make finding the minimum perimeter of the third case 
efficient, by only considering triangles that could have an area less 
than <i>p</i>.
</p>
<p>To find the minimum perimeter for the third case (if it is less than <i>p</i>)
 we select the points that are within a distance of <i>p/2</i> from the 
vertical separation line.  Then we iterate through those points from top
 to bottom, and maintain a list of all the points in a box of size <i>p x
 p/2</i>, with the bottom edge of the box at the most recently 
considered point.  As we add each point to the box, we compute the 
perimeter of all triangles using that point and each pair of points in 
the box.  (We could exclude triangles entirely to the left or right of 
the dividing line, since those have already been considered.)
</p>
<p>We can prove that the number of points in the box is at most 16, so 
we only need to consider at most a small constant number of triangles 
for each point.
</p>
<p>Splitting the current set of points by a vertical line requires the 
points to be sorted by <i>x</i> and going through the points vertically 
requires having the points sorted by <i>y</i>. If we do the <i>y</i> 
sort at each step that gives us an <i>O(n log<sup>2</sup> n)</i> 
algorithm, but we can keep the set of points twice, one array would have
 the points sorted by <i>x</i> and one would have the points sorted by <i>y</i>,
 and this way we have an <i>O(n log n)</i> algorithm.
</p>
<p>The time limits were a bit tight and input limits were large because 
some <i>O(n<sup>2</sup>)</i> algorithms work really well on random 
cases. This is why during the contest some solutions that had the right 
idea but used a <i>p x p</i> box size or sorted by <i>y</i> at each step
 didn't manage to solve the large test cases fast enough.
</p>
You can read Tomek Czajka's source to get the details of a good 
implementation:
<pre>#include &lt;algorithm&gt;
#include &lt;cassert&gt;
#include &lt;cmath&gt;
#include &lt;cstdio&gt;
#include &lt;cstdlib&gt;
#include &lt;vector&gt;
using namespace std;
#define REP(i,n) for(int i=0;i&lt;(n);++i)
template&lt;class T&gt; inline int size(const T&amp;c) { return c.size();}

const int BILLION = 1000000000;
const double INF = 1e20;
typedef long long LL;

struct Point {
  int x,y;
  Point() {}
  Point(int x,int y):x(x),y(y) {}
};

inline Point middle(const Point &amp;a, const Point &amp;b) {
  return Point((a.x+b.x)/2, (a.y+b.y)/2);
}

struct CmpX {
  inline bool operator()(const Point &amp;a, const Point &amp;b) {
    if(a.x != b.x) return a.x &lt; b.x;
    return a.y &lt; b.y;
  }
} cmpx;

struct CmpY {
  inline bool operator()(const Point &amp;a, const Point &amp;b) {
    if(a.y != b.y) return a.y &lt; b.y;
    return a.x &lt; b.x;
  }
} cmpy;

inline LL sqr(int x) { return LL(x) * LL(x); }

inline double dist(const Point &amp;a, const Point &amp;b) {
  return sqrt(double(sqr(a.x-b.x) + sqr(a.y-b.y)));
}

inline double perimeter(const Point &amp;a,
                        const Point &amp;b,
                        const Point &amp;c) {
  return dist(a,b) + dist(b,c) + dist(c,a);
}

double calc(int n, const Point points[],
            const vector&lt;Point&gt; &amp;pointsByY) {
  if(n&lt;3) return INF;
  int left = n/2;
  int right = n-left;
  Point split = middle(points[left-1], points[left]);
  vector&lt;Point&gt; pointsByYLeft, pointsByYRight;
  pointsByYLeft.reserve(left);
  pointsByYRight.reserve(right);
  REP(i,n) {
    if(cmpx(pointsByY[i], split))
      pointsByYLeft.push_back(pointsByY[i]);
    else
      pointsByYRight.push_back(pointsByY[i]);
  }
  double res = INF;
  res = min(res, calc(left, points, pointsByYLeft));
  res = min(res, calc(right, points+left, pointsByYRight));
  static vector&lt;Point&gt; closeToTheLine;
  int margin = (res &gt; INF/2) ? 2*BILLION : int(res/2);
  closeToTheLine.clear();
  closeToTheLine.reserve(n);
  int start = 0;
  for(int i=0;i&lt;n;++i) {
    Point p = pointsByY[i];
    if(abs(p.x - split.x) &gt; margin) continue;
    while(start &lt; size(closeToTheLine) &amp;&amp;
          p.y - closeToTheLine[start].y &gt; margin) ++start;
    for(int i=start;i&lt;size(closeToTheLine);++i) {
      for(int j=i+1;j&lt;size(closeToTheLine);++j) {
        res = min(res, perimeter(p, closeToTheLine[i],
                                 closeToTheLine[j]));
      }
    }
    closeToTheLine.push_back(p);
  }
  return res;
}

double calc(vector&lt;Point&gt; &amp;points) {
  sort(points.begin(), points.end(), cmpx);
  vector&lt;Point&gt; pointsByY = points;
  sort(pointsByY.begin(), pointsByY.end(), cmpy);
  return calc(size(points), &amp;points[0], pointsByY);
}

int main() {
  assert(0==system("cat &gt; Input.java"));
  fprintf(stderr, "Compiling generator\n");
  assert(0==system("javac Input.java"));
  fprintf(stderr, "Running generator\n");
  assert(0==system("java -Xmx512M Input &gt; input.tmp"));
  fprintf(stderr, "Solving\n");
  FILE *f = fopen("input.tmp", "r");
  int ntc; fscanf(f, "%d", &amp;ntc);
  REP(tc,ntc) {
    int n; fscanf(f, "%d", &amp;n);
    vector&lt;Point&gt; points;
    points.reserve(n);
    REP(i,n) {
      int x,y; fscanf(f, "%d%d", &amp;x, &amp;y);
      points.push_back(Point(2*x-BILLION,2*y-BILLION));
    }
    double res = calc(points);
    printf("Case #%d: %.15e\n", tc+1, res/2);
  }
  fclose(f);
}
</pre></div>
      
      <div id="dsb-problem-analysis-div2" 
class="dsb-problem-content-div" style="display: none;"><p>
A counting problem, with a board size not too big. The problem gives a 
quick impression of dynamic programming on a space of exponentially many
 states. And it is indeed so.
</p>
<p>
By the limits of this problem, let us say the size is the larger of m 
and n. A solution with 2<sup>2⋅size</sup> states is fine, while a 
solution with 2<sup>4⋅size</sup> states is probably only good for the 
small dataset. However, for regular programming contest goers, there are
 many conventional ways to define the states for similar grid problems 
that fall into the latter category.
</p>
<p>
So, the key part of the problem is to find the right state space. Once 
it is found, the finalists can no doubt carry out the dynamic 
programming solution easily.
</p>
<p>
The basic picture is the lattice paths. Specifically, let us consider, 
in a doubly sorted grid, all the letters less than or equal to a 
particular character. They form an upwards closed region towards the 
top-left corner. In other words, if the letter in (r, c) is no greater 
than the prescribed character, so is the letter in (r', c'), if r' ≤ r 
and c' ≤ c. As a result, the boundary separating this region and the 
rest of the grid forms a lattice path from the bottom-left to the 
top-right, and can only go north or east. This is a well known subject 
-- there are (m+n choose m) such paths in total. Let us call them <i>monotone
 paths</i>. For two monotone paths, we say one dominates the other if 
one never goes above the other. Any doubly sorted grid corresponds in a 
one to one fashion to 26 monotone paths (some of which may be 
identical), one for each letter, and the path for a bigger letter 
dominates the paths for the smaller letters. The left picture below 
depicts the situation when there are three letters; and the monotone 
boundaries for 'a' and 'b' are highlighted.
</p>
<p>
<img src="year%20of%20more%20code%20jam_files/a.png">
</p>
<p>
Just one step further. Let us focus not only the exact boundary for a 
letter but any monotone path. For any monotone path <i>P</i> and any 
letter <i>c</i>, define
</p><blockquote>
dp[P][c] := the number of  ways one can fill all the squares above the 
path <i>P</i>, using only the letters no greater than <i>c</i>, so that 
the upper part is doubly sorted, and any pre-filled letter in the upper 
part is respected.
</blockquote>

<p>
For any monotone path except the most dominated one, we have one or more
 <i>maximal</i> points, those are the points where the path goes east 
then followed by a step upwards. In the second picture above, we 
highlight a monotone path with its maximal points colored. To compute 
dp[P][c], we can divide the situation into two cases. (1) The letter <i>c</i>
 does not appear at all. There are dp[P][c-1] ways to do so. (2) 
Otherwise, <i>c</i> must appear in at least one of the maximal points of
 <i>P</i>. For each non-empty subset of the maximal points, we can 
assign the letter c to them, reducing our task to dp[P'][c], where <i>P'</i>
 is a path that only differs from P in that subset of maximal points. We
 use inclusion-exclusion formula on all the non-empty subsets to compute
 the contribution to dp[P][c] in this case. 
</p>
<p>
Such a solution is relatively intuitive, and is fast enough under our 
constraints. By adding one more helper, one can find a faster solution. 
Now let us refine
</p><blockquote>
dp[P][c][k] := the number of  ways one can fill all the squares above 
the path <i>P</i>, using only the letters no greater than <i>c</i>, <i>and
 the letter c does not occur anywhere after column k</i>,so that the 
upper part is doubly sorted, and any pre-filled letter in the upper part
 is respected.
</blockquote>
We leave the implementation details as an easy exercise for interested 
readers. We mention that, when m=n, the number of states is 26⋅(2n 
choose n)⋅n = Θ(4<sup>n</sup>n<sup>0.5</sup>). Although the computation 
of a single dp[P][c][k] may involve up to <i>n</i> steps, the running 
time can be shown as Θ(4<sup>n</sup>n<sup>0.5</sup>) by a simple 
amortized analysis -- for fixed <i>P</i> and <i>c</i>, we need O(n) 
steps in total to compute the table for all <i>k</i>. 

</div>
      
      <div id="dsb-problem-analysis-div3" 
class="dsb-problem-content-div" style="display: none;"><p 
class="problem-item">Connection graph</p>

<p>We start by representing the problem as a graph problem. Each tower 
is a
vertex in the graph and has a weight equal to its score. If a tower A 
has another tower B in its
range, we represent this fact as a directed edge from A to B. The 
problem is to
choose a set of vertices with maximum weight such that for every edge 
from A to
B, if A is chosen then B is also chosen. In the following, we assume the
 number
of towers (vertices) is <b>V</b> and the number of edges is <b>E</b>.

</p><p class="problem-item">Reduce to an instance of MIN-CUT</p>

<p>
To reduce the problem to an instance of MIN-CUT, we create a flow
network as follows. Create a source vertex, a sink vertex, and one 
vertex for
each tower. Suppose a tower has score <b>s</b>. If <b>s</b> &gt; 0,
create an edge from the vertex to the sink with capacity <b>s</b>. If
<b>s</b> &lt; 0, create an edge from the source to this vertex with 
capacity
|<b>s</b>|. Finally, for every edge in the connection graph, create a 
similar
edge in the flow network with infinite capacity. The network has <b>V</b>
 + 2 =
O(<b>V</b>) vertices and O(<b>V</b> + <b>E</b>) edges.
</p>
<p>
Now every finite cut in the graph represents a choice of towers - we 
choose every tower
on the same side of the cut as the source. The infinite capacity edges 
enforce
that the choice follows the given constraints (otherwise we get a cut of
infinite weight). The edges from the source and to the sink penalize the
solution appropriately for choosing towers with negative scores and for 
not
choosing towers with positive scores. If the value of the best cut is <b>C</b>,
the answer is <b>S</b> - <b>C</b>, where <b>S</b> is the sum of positive
tower scores.
</p>

<p class="problem-item">Solving MIN-CUT</p>
<p>
By the max-flow min-cut theorem, we can solve the MIN-CUT instance 
generated above by computing the maximum flow in the same graph. To 
compute the maximum
flow, we can use the Edmonds-Karp algorithm (a variant of
Ford-Fulkerson which selects augmenting paths using BFS),
which results in complexity bounded by
O(<b>V</b>(<b>V</b>+<b>E</b>)<sup>2</sup>) = O(<b>V</b><sup>5</sup>).
In practice, this was fast enough to solve all possible test cases.
</p>
<p>One could also use a more complicated push-relabel max-flow algorithm
which, with a FIFO
vertex selection rule, results in complexity O(<b>V</b><sup>3</sup>).
</p>
<p>Yet another algorithm, thanks to integral capacities, is the capacity
scaling variant of Ford-Fulkerson (start by searching for augmenting 
paths
with weights being large powers of 2 first, and then decrease). This 
results
in O((<b>V</b>+<b>E</b>)<sup>2</sup> log <b>F</b>) = O(<b>V</b><sup>4</sup>
 log
<b>F</b>)
where <b>F</b> is the maximum value of the flow.
</p>

<p class="problem-item">Reducing the number of edges</p>

<p>Finally, there is a geometric trick using which we can reduce the 
number of
edges <b>E</b> to O(<b>V</b>), thus reducing the complexity of the 
algorithms
above. The complexity of Edmonds-Karp becomes O(<b>V</b><sup>3</sup>) 
and of
capacity scaling: O(<b>V</b><sup>2</sup> log <b>F</b>).</p>

<p>First, notice that we can remove edges without changing the final 
answer as
long as the transitive closure of the graph stays the same.</p>

<p>The crucial trick is to see that if there are two directed edges A-C 
and B-C,
and the angle ACB is smaller than 60 degrees, then we can remove the 
longer
edge. Suppose A-C is longer than B-C. Then if we remove the edge A-C, 
there is
still going to be an indirect connection A-B-C (using shorter or equal 
length
edges), thanks to the fact that the range of A is a circle.</p>

<p>If we keep doing this, every vertex will end up with at most 6 
incoming
edges, thus reducing the total number of edges to at most 6<b>V</b>.</p>
<br><br>

<p class="problem-item">More information</p>
<p>
This problem is also equivalent to the <a 
href="http://en.wikipedia.org/wiki/Closure_problem" target="_blank">Minimum
 Closure Problem</a>, which was studied in the 1970s and has 
applications in the mining industry.
</p><p>
<a href="http://en.wikipedia.org/wiki/Max-flow_min-cut_theorem" 
target="_blank">Max Flow Min Cut Theorem</a>
</p></div>
      
      <div id="dsb-problem-analysis-div4" 
class="dsb-problem-content-div" style="display: none;"><p>
Last year we were trying to solve different instances of this problem. 
It took a long time to converge to this particular shape, and even after
 we settled on the current requirements, we were still tweaking the 
input limits at 2am the night before the contest to make the problem a 
bit more interesting. The problem nicely combines together dynamic 
programming, greedy and graph related notions like biconnected 
components and trees.
</p>
<p>
The first step is deciding if a particular configuration is or isn't 
solvable. If for two colors their corresponding marbles alternate it 
means that the two pairs of marbles need to be joined by curves on 
opposite sides of the horizontal line <i>Y=0</i>. We can build a graph 
where the nodes represent pairs of same-color marbles and form a graph 
with edges between pairs of marbles that alternate. We can draw the 
paths with no intersection if and only if this graph is bipartite.
</p>
<p>
Next, for solvable configurations we compute the minimum height. The 
pairs graph can have many connected components, and for each such 
component we can choose two ways of drawing the lines (with the first 
pair of marbles above the <i>Y=0</i> line or below it), so in total we 
would have <i>O(2<sup>components</sup>)</i> configurations. This idea 
can solve the small case but is too time consuming for the large case.
</p>
<p>
Solving the large case requires us to use dynamic programming. Our state
 will be defined by <i>left, right, height_up</i> and <i>height_down</i>.
 For each state we compute a boolean value which tells us if the 
subproblem which uses the set of marbles with indexes from <i>left</i> 
to <i>right</i> can be solved in the vertical range <i>[-height_down .. 
height_up]</i>. Computing this value is a bit tricky, what we need to 
notice is that we can try each of the two ways of drawing the component 
that starts at index <i>left</i>. Then an important observation is that 
 we can draw each path with the maximum height possible if the line is 
above the X axis or maximum depth possible if the line is below the X 
axis as long as our drawing is within the <i>[-height_down .. height_up]</i>
 vertical range. Using these ideas we can come up with an <i>O(n<sup>5</sup>)</i>
 algorithm.
</p>
<p>
We can improve on this solution by using the state <i>(left, right, 
height_up)</i> and for each state finding the smallest height_down for 
which the subproblem <i>[left .. right]</i> is solvable. Now we notice 
that we should use dynamic programming on pairs of <i>left</i> and <i>right</i>
 where connected components of marbles start and finish.  This will make
 <i>right</i> uniquely defined by <i>left</i>. Thus we have reduced the 
state space to <i>O(n<sup>2</sup>)</i> states. We also notice that the 
connected components form a tree-like structure where we need to solve 
the innermost components first and then solve outer components, much 
like visiting the leaves of a tree first and getting closer and closer 
to the root. Now each connected component will be analyzed just once at 
an upper component level so the overall algorithm will take <i>O(n<sup>2</sup>)</i>
 time. 
</p>
Here's Tomek Czajka's solution:
<pre>#include &lt;algorithm&gt;
#include &lt;cassert&gt;
#include &lt;cstdio&gt;
#include &lt;map&gt;
#include &lt;string&gt;
#include &lt;vector&gt;
using namespace std;
#define REP(i,n) for(int i=0;i&lt;(n);++i)
template&lt;class T&gt; inline int size(const T&amp;c) { return c.size();}
const int INF = 1000000000;

int n; // number of types of marbles
vector&lt;vector&lt;int&gt; &gt; where; // [n][2]
vector&lt;int&gt; marbles; // [2*n]

void readInput() {
  char buf[30];
  map&lt;string,int&gt; dict;
  scanf("%d", &amp;n);
  marbles.clear(); marbles.reserve(2*n);
  where.clear(); where.resize(n);
  for(int i=0;i&lt;2*n;++i) {
    scanf("%s",buf);
    string s = buf;
    map&lt;string,int&gt;::iterator it = dict.find(s);
    int m;
    if(it==dict.end()) {
      m = size(dict);
      dict[s] = m;
    } else {
      m = it-&gt;second;
    }
    marbles.push_back(m);
    where[m].push_back(i);
  }
}

struct Event {
  int x,t;
  // t=0 start top, 1 end top
  // t=2 start bot, 3 end bot
};

vector&lt;int&gt; vis;

bool cross(int m1,int m2) {
  return
      where[m1][0] &lt; where[m2][0] &amp;&amp;
      where[m2][0] &lt; where[m1][1] &amp;&amp;
      where[m1][1] &lt; where[m2][1] ||
      where[m2][0] &lt; where[m1][0] &amp;&amp;
      where[m1][0] &lt; where[m2][1] &amp;&amp;
      where[m2][1] &lt; where[m1][1];
}

void dfs(int m,int sign) {
  if(vis[m]==sign) return;
  if(vis[m]==-sign) throw 0;
  vis[m]=sign;
  REP(i,n) if(i!=m &amp;&amp; cross(m,i)) dfs(i,-sign);
}

vector&lt;vector&lt;Event&gt; &gt; cacheCalcEvents;

const vector&lt;Event&gt; &amp;calcEvents(int startx) {
  vector&lt;Event&gt; &amp;res = cacheCalcEvents[startx];
  if(!res.empty()) return res;
  vis.assign(n,0);
  dfs(marbles[startx],1);
  REP(x,2*n) {
    int m = marbles[x];
    if(vis[m]==0) continue;
    int nr=0;
    if(where[m][nr] != x) ++nr;
    assert(where[m][nr]==x);
    Event e; e.x=x;
    e.t = (1-vis[m]) + nr;
    res.push_back(e);
  }
  return res;
}

vector&lt;vector&lt;int&gt; &gt; cacheCalcH2;

int calcH2(int a,int b,int h1) {
  if(h1&lt;0) return INF;
  if(a==b) return 0;
  int &amp;res = cacheCalcH2[a][h1];
  if(res!=-1) return res;
  const vector&lt;Event&gt; &amp;events = calcEvents(a);
  res = INF;
  for(int mask = 0; mask&lt;=2; mask+=2) {
    int top=0, bot=0;
    int h2 = 0;
    REP(i,size(events)+1) {
      int alpha = i==0 ? a : events[i-1].x + 1;
      int beta = i==size(events) ? b : events[i].x;
      h2 = max(h2, calcH2(alpha, beta, h1 - top) + bot);
      if(i!=size(events)) {
        switch(events[i].t ^ mask) {
          case 0: ++top; break;
          case 1: --top; break;
          case 2: ++bot; break;
          case 3: --bot; break;
        }
      }
    }
    res = min(res, h2);
  }
  return res;
}

int solve() {
  int res = INF;
  cacheCalcH2.assign(2*n, vector&lt;int&gt;(n+1,-1));
  cacheCalcEvents.clear(); cacheCalcEvents.resize(2*n);
  try {
    REP(h1,n+1) {
      res = min(res, h1 + calcH2(0,2*n,h1));
    }
    return res;
  } catch(int) { return INF; }
}

int main() {
  int ntc; scanf("%d", &amp;ntc);
  REP(tc,ntc) {
    readInput();
    int res = solve();
    if(res==INF) res = -1;
    printf("Case #%d: %d\n", tc+1, res);
  }
}
</pre>
</div>
      
      <div id="dsb-problem-analysis-div5" 
class="dsb-problem-content-div" style="display: none;"><p>There are 
various ways to solve this problem. The solutions can
be split into two kinds of approaches. One way is to solve the problem 
exactly
(or, to arbitrary precision), the other is to approximate the answer 
with
high enough precision. The exact solutions generally try to divide the 
square
into subareas of the same color, compute the area of each subarea 
separately,
and add up the totals for each color. We discuss these first.</p>

<p class="problem-item">Intersection of (mostly) triangles</p>

<p>First, consider just one light. We want to compute the total area 
illuminated
by the light. To do that, compute the tangent lines from the light to 
each
pillar, and lines from the light to each corner of the room, and 
consider each "cone" between two adjacent lines separately. Each cone 
will either end up hitting a wall, or hitting a pillar. In the first
case we get a triangle, whose area we can easily compute.
In the second case we get a "quasi-triangle", that is,
a triangle minus a disk segment. Here, we need to subtract the area of 
the disk
segment. We can compute the area of a disk segment by subtracting a 
triangle
from the area of a disk sector (a "pie slice").</p>

<p>Once we have the total area covered by each light, we need one more 
thing:
the area covered by both lights. We can take each pair of triangles or
quasi-triangles generated in the previous step, and compute the common 
area
between them. Now we need to compute the area of the
intersection of two triangles or quasi-triangles.</p>

<p>A simple way to approach this is to first treat quasi-triangles as 
triangles
(include the disk segment). Now we compute the intersection between the 
two
triangles, which gives us a polygon (up to six sides). If one or both of
 the
triangles were actual triangles, or when the pillars subtracted from the
 two
quasi-triangles were different, the polygon is the correct answer - 
there is
no need to account for the subtracted disk segments, because each 
segment is
outside the other triangle anyway.</p>

<p>The only nasty case comes up when we have
two quasi-triangles ending at the same pillar. In that case, we first 
compute
the intersection polygon, and then we subtract the pillar from the 
polygon.
To do that, remove those edges and parts of edges of the polygon that 
fall inside the circle and
replace them with one edge. The answer will be the area of the reduced 
polygon, again minus a disk sector cut off by a line, which we already 
know how to
compute.</p>

<p class="problem-item">Line sweeping</p>

<p>
Line sweeping is a common technique in computational geometry. We sweep a
 vertical line from the left edge to the right. As in the solution 
above, the interesting rays are the tangent rays from lights to circles.
 The interesting moments are when the x-coordinate of the vertical line 
reaches one of the following. (1) A light. (2) A pillar starts or ends. 
(3) An interesting ray touches or intersects a circle, or hits the wall.
 (4) Two interesting rays intersect.
</p>
<p>
Now, let x<sub>1</sub> &lt; x<sub>2</sub> be two adjacent interesting 
moments. The vertical strip between x<sub>1</sub> and x<sub>2</sub> is 
divided into pieces. Each piece is bounded above and below by a general 
segment -- a line segment or an arc. By the definition of the 
interesting moments, nothing interesting will happen in the middle, and 
each piece is of one color. So we can sample an arbitrary point from 
each piece to decide the color. The pieces are not convex, but this is 
not a problem -- they are convex on any vertical line so we can easily 
find a point that is inside each piece. The area of each piece is also 
easy to compute -- it is basically a trapezoid, possibly degenerating 
into a triangle if the upper and lower boundaries meet at one end, and 
one needs to subtract a disk segment for each arc-boundary.
</p>
<p>
Line sweeping is often used with nice data structures to achieve good 
complexity. But that is not our primary concern here. We used it for the
 simplicity of the implementation -- the only geometric operations 
needed here are intersections between lines and circles.
</p>

<p class="problem-item">Approximations</p>

<p>The problem requires a relative or absolute error of at most 10<sup>-5</sup>,
while the total room area is 10000. Cases requiring the most care are 
those when
one of the four colors has an area less than 1, in which case the error 
we can
make relative to the area of the whole room is 10<sup>-9</sup>.</p>

<p>The simplest approach would be to sample a lot of points either 
randomly, or
in a regular grid, compute the color of each sample and assume that the 
sample
is representative of the
correct answer. The above error estimation suggests though that to get 
enough
precision, we would need to sample on the order of 10<sup>9</sup> points
 (or
more, due to random deviations). This is too much for a solution to run 
in
the 4 or 8 minutes allowed. A smarter approach is needed.</p>

<p>Computing the area can be seen as a problem of computing a 
two-dimensional
integral. A hybrid approach is also possible: we can see it as a 
one-dimensional
integral along the <b>x</b> coordinate, and for each <b>x</b> coordinate
 we sample we can
compute the exact answer by looking at which segment of the vertical 
line
is in what color. This one-dimensional sub-problem is somewhat simpler 
to do than solving the full
two-dimenstional problem exactly.</p>

<p>In either case, whether we compute a two-dimensional integral or just
 a
one-dimensional one for a more complex function, we need a smart way to
approximate the integral. Uniform or random sampling is not enough.</p>

<p>You can search the web for methods of
<a href="http://www.google.com/search?q=numerical+integration" 
target="_blank">numerical integration</a>.
In this problem, an adaptive algorithm is needed, which means that we 
sample
more "interesting" areas with more samples than the less "interesting" 
ones.
"Interesting" can be defined as "large changes in values" (large first
derivative) or "wild changes in values" (large second derivative).</p>

<p>One simple algorithm is to write the integration procedure as a 
recursive
function. We recursively try splitting the interval into smaller ones, 
and see
how much the answer changes through such increases of precision. We stop
 the
recursion when the answer changes very little, which means the interval 
is small
enough or the function is smooth enough in the interval. This will 
result in
sampling the more "interesting" areas more accurately.</p></div>
      
    
    </div>

    <div id="dsb-clarification-page" class="dsb-content-pages">
      <!-- The clarifications table -->
      <div id="clarTableDiv" class="clarTableWrapper"></div><div>
        <table style="display: block;" id="dsb-clarification-table">
          <colgroup span="9">
            <col width="16%"><col width="2%">
            <col width="10%"><col width="2%">
            <col width="28%"><col width="2%">
            <col width="10%"><col width="2%">
            <col width="28%">
          </colgroup>
          <thead>
            <tr>
            <th>Category</th><th>&nbsp;</th>
            <th class="clarTimeColumn">Asked</th><th>&nbsp;</th>
            <th>Question</th><th>&nbsp;</th>
            <th class="clarTimeColumn">Answered</th><th>&nbsp;</th>
            <th>Answer</th>
            </tr>
          </thead>
          <tbody id="dsb-clarification-tbody"><tr class="dsb-clar-tr 
dsb-clar-tr-announcement"><td class="clarProbTd">Year of More Code Jam<br><span
 style="color: rgb(102, 102, 102);">Announcement</span></td><td></td><td
 class="clarTimeColumn">10:18</td><td></td><td><i>"and the i-th round 
will be held di days after the beginning of the tournament. "

if di = 2, that contest is held in the second day or third day?</i></td><td></td><td
 style="color: red;" class="clarTimeColumn">21:18</td><td></td><td><i>The
 i'th round will be held on day di of the tournament. The first round of
 the tournament is held on day 1 of the tournament (d1 == 1).</i></td></tr></tbody>
        </table>
      </div>
      <div style="display: none;" id="dsb-submit-clarification">
        <!-- The link to ask a clarification -->
        <div style="padding: 0.5em 0pt 0.3em;">
          <b>Ask a question:</b>
        </div>
        <!-- The form for asking clarification -->
        <div>
          <form onsubmit="return GCJ.submitClarification(this);"><div 
style="display: none;"><input name="csrfmiddlewaretoken" 
value="MDExNWVjMzg0ZDY4Njc5MDRlMmY0YWZiNjhmMDNlMDR8fHwxMjcxNjU0MjI2Njk3MjU1"
 type="hidden"></div>
            <div><textarea rows="5" cols="60" name="q"></textarea></div>
            <div style="padding-top: 0.3em;">
            <select name="problem">
              <option value="_" selected="selected">[General]</option>
              
              <option value="322102">Year of More Code Jam</option>
              
              <option value="317103">Min Perimeter</option>
              
              <option value="319101">Doubly-sorted Grid</option>
              
              <option value="322101">Wi-fi Towers</option>
              
              <option value="339102">Marbles</option>
              
              <option value="341101">Lights</option>
              
            </select>
            &nbsp;
            <input id="dsb-submit-clarification-button" value="Ask" 
type="submit">
            </div>
          </form>
        </div>
      </div>
      <!-- Too many pending clarifications -->
      <div id="dsb-cannot-ask-question-text" style="font-weight: bold; 
padding: 0.5em 0pt 0.3em; display: block;">You can not ask questions at 
this time. Please contact us by email.</div>

    </div>

    <div id="dsb-submissions-page" class="dsb-content-pages">
      <div id="dsb-submissions-status" class="dsb-sub-status-msg">
        You have 0 submissions.
      </div>
      <table id="dsb-submissions-table" class="dsb-sub-main-table" 
style="display: none;">
      <thead>
        <tr id="dsb-sub-main-table-header">
          <th class="dsb-sub-row-id-width">ID</th>
          <th class="dsb-sub-name-width">Problem</th>
          <th class="dsb-sub-difficulty-width">Difficulty</th>
          <th class="dsb-sub-input-width">Input</th>
          <th class="dsb-sub-output-width">Output</th>
          <th class="dsb-sub-source-width">Solution</th>
          <th class="dsb-sub-status-width">Status</th>
          <th class="dsb-sub-time-width">Time</th>
        </tr>
      </thead>
      <tbody id="dsb-submissions-rows">
      </tbody>
      </table>
    </div>

  </div>
  </div>
</div>

<div id="dsb-input-dropdown-menu0-0" class="dsb-input-dropdown-menu"><span
 class="dsb-input-link-span dsb-input-dropdown-menu-item" 
id="dsb-input-link-zip0-0"><img 
src="year%20of%20more%20code%20jam_files/zip.gif" 
class="dsb-input-link-img"><span class="dsb-input-link-text" 
id="dsb-input-link-zip-text0-0">A-small.in.zip</span></span></div><div 
id="dsb-input-dropdown-menu0-1" class="dsb-input-dropdown-menu"><span 
class="dsb-input-link-span dsb-input-dropdown-menu-item" 
id="dsb-input-link-zip0-1"><img 
src="year%20of%20more%20code%20jam_files/zip.gif" 
class="dsb-input-link-img"><span class="dsb-input-link-text" 
id="dsb-input-link-zip-text0-1">A-large.in.zip</span></span></div><div 
id="dsb-input-dropdown-menu1-0" class="dsb-input-dropdown-menu"><span 
class="dsb-input-link-span dsb-input-dropdown-menu-item" 
id="dsb-input-link-zip1-0"><img 
src="year%20of%20more%20code%20jam_files/zip.gif" 
class="dsb-input-link-img"><span class="dsb-input-link-text" 
id="dsb-input-link-zip-text1-0">B-small.in.zip</span></span></div><div 
id="dsb-input-dropdown-menu1-1" class="dsb-input-dropdown-menu"><span 
class="dsb-input-link-span dsb-input-dropdown-menu-item" 
id="dsb-input-link-zip1-1"><img 
src="year%20of%20more%20code%20jam_files/zip.gif" 
class="dsb-input-link-img"><span class="dsb-input-link-text" 
id="dsb-input-link-zip-text1-1">B-large.in.zip</span></span></div><div 
id="dsb-input-dropdown-menu2-0" class="dsb-input-dropdown-menu"><span 
class="dsb-input-link-span dsb-input-dropdown-menu-item" 
id="dsb-input-link-zip2-0"><img 
src="year%20of%20more%20code%20jam_files/zip.gif" 
class="dsb-input-link-img"><span class="dsb-input-link-text" 
id="dsb-input-link-zip-text2-0">C-small.in.zip</span></span></div><div 
id="dsb-input-dropdown-menu2-1" class="dsb-input-dropdown-menu"><span 
class="dsb-input-link-span dsb-input-dropdown-menu-item" 
id="dsb-input-link-zip2-1"><img 
src="year%20of%20more%20code%20jam_files/zip.gif" 
class="dsb-input-link-img"><span class="dsb-input-link-text" 
id="dsb-input-link-zip-text2-1">C-large.in.zip</span></span></div><div 
id="dsb-input-dropdown-menu3-0" class="dsb-input-dropdown-menu"><span 
class="dsb-input-link-span dsb-input-dropdown-menu-item" 
id="dsb-input-link-zip3-0"><img 
src="year%20of%20more%20code%20jam_files/zip.gif" 
class="dsb-input-link-img"><span class="dsb-input-link-text" 
id="dsb-input-link-zip-text3-0">D-small.in.zip</span></span></div><div 
id="dsb-input-dropdown-menu3-1" class="dsb-input-dropdown-menu"><span 
class="dsb-input-link-span dsb-input-dropdown-menu-item" 
id="dsb-input-link-zip3-1"><img 
src="year%20of%20more%20code%20jam_files/zip.gif" 
class="dsb-input-link-img"><span class="dsb-input-link-text" 
id="dsb-input-link-zip-text3-1">D-large.in.zip</span></span></div><div 
id="dsb-input-dropdown-menu4-0" class="dsb-input-dropdown-menu"><span 
class="dsb-input-link-span dsb-input-dropdown-menu-item" 
id="dsb-input-link-zip4-0"><img 
src="year%20of%20more%20code%20jam_files/zip.gif" 
class="dsb-input-link-img"><span class="dsb-input-link-text" 
id="dsb-input-link-zip-text4-0">E-small.in.zip</span></span></div><div 
id="dsb-input-dropdown-menu4-1" class="dsb-input-dropdown-menu"><span 
class="dsb-input-link-span dsb-input-dropdown-menu-item" 
id="dsb-input-link-zip4-1"><img 
src="year%20of%20more%20code%20jam_files/zip.gif" 
class="dsb-input-link-img"><span class="dsb-input-link-text" 
id="dsb-input-link-zip-text4-1">E-large.in.zip</span></span></div><div 
id="dsb-input-dropdown-menu5-0" class="dsb-input-dropdown-menu"><span 
class="dsb-input-link-span dsb-input-dropdown-menu-item" 
id="dsb-input-link-zip5-0"><img 
src="year%20of%20more%20code%20jam_files/zip.gif" 
class="dsb-input-link-img"><span class="dsb-input-link-text" 
id="dsb-input-link-zip-text5-0">F-small.in.zip</span></span></div><div 
id="dsb-input-dropdown-menu5-1" class="dsb-input-dropdown-menu"><span 
class="dsb-input-link-span dsb-input-dropdown-menu-item" 
id="dsb-input-link-zip5-1"><img 
src="year%20of%20more%20code%20jam_files/zip.gif" 
class="dsb-input-link-img"><span class="dsb-input-link-text" 
id="dsb-input-link-zip-text5-1">F-large.in.zip</span></span></div></div>

<div style="display: none;" id="dsb-loading-message-div">Google Code Jam
 loading...</div>

<div style="height: 3em; clear: both;"></div>
<div id="footer">
  
  <span id="copyright">© 2008-2010 Google</span>
  <a href="http://www.google.com/">Google Home</a> -
  <a href="http://code.google.com/codejam/terms.html">Terms and 
Conditions</a><br><br>
  <a href="http://code.google.com/appengine"><img 
src="year%20of%20more%20code%20jam_files/appengine-noborder-120x30.gif"></a>
</div>

<div style="height: 1em;">&nbsp;</div>

<script type="text/javascript">
GCJ.initHistory();
</script><input name="history_state0" id="history_state0" 
style="display: none;" type="text">

</div></body></html>